"use client";
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/query-data.tsx
import React from "react";
import useSWR, {
  SWRConfig,
  useSWRConfig
} from "swr";
var __SWRConfig = void 0;
var mutateKeys = (invalidateKey) => {
  if (__SWRConfig) {
    const { cache, mutate } = __SWRConfig;
    (invalidateKey != null ? [invalidateKey] : Array.from(cache.keys())).forEach((key) => {
      mutate(key);
    });
  }
};
function getPlasmicDefaultSWROptions(opts) {
  return {
    revalidateIfStale: !!(opts == null ? void 0 : opts.isMutable),
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  };
}
function usePlasmicQueryData(key, fetcher) {
  const prepassCtx = React.useContext(PrepassContext);
  const opts = getPlasmicDefaultSWROptions();
  if (prepassCtx) {
    opts.suspense = true;
  }
  const config = useSWRConfig();
  React.useEffect(() => {
    __SWRConfig = config;
  }, [config]);
  const wrappedFetcher = React.useMemo(
    () => wrapLoadingFetcher(fetcher),
    [fetcher]
  );
  const resp = useSWR(key, wrappedFetcher, opts);
  if (resp.data !== void 0) {
    return { data: resp.data };
  } else if (resp.error) {
    return { error: resp.error };
  } else {
    return { isLoading: true };
  }
}
function useMutablePlasmicQueryData(key, fetcher, options) {
  const prepassCtx = React.useContext(PrepassContext);
  const opts = __spreadValues(__spreadValues({}, getPlasmicDefaultSWROptions({ isMutable: true })), options);
  if (prepassCtx) {
    opts.suspense = true;
  }
  const config = useSWRConfig();
  React.useEffect(() => {
    __SWRConfig = config;
  }, [config]);
  const [isLoading, setIsLoading] = React.useState(false);
  const fetcherWrapper = React.useCallback(
    (...args) => __async(this, null, function* () {
      setIsLoading(true);
      try {
        return yield wrapLoadingFetcher(fetcher)(...args);
      } finally {
        setIsLoading(false);
      }
    }),
    [fetcher]
  );
  const laggyDataRef = React.useRef();
  const { isValidating, mutate, data, error } = useSWR(
    key,
    fetcherWrapper,
    opts
  );
  React.useEffect(() => {
    if (data !== void 0) {
      laggyDataRef.current = data;
    }
  }, [data]);
  return React.useMemo(
    () => __spreadValues(__spreadValues({
      isValidating,
      mutate,
      isLoading: data === void 0 && error === void 0 || isLoading
    }, data !== void 0 ? { data } : error === void 0 && laggyDataRef.current ? (
      // Show previous data if available
      { data: laggyDataRef.current, isLagging: true }
    ) : {}), error !== void 0 ? { error } : {}),
    [isValidating, mutate, data, error, isLoading]
  );
}
function PlasmicQueryDataProvider(props) {
  const { children, suspense, prefetchedCache } = props;
  const prepass = React.useContext(PrepassContext);
  if (prepass) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  } else {
    return /* @__PURE__ */ React.createElement(
      SWRConfig,
      {
        value: {
          fallback: prefetchedCache != null ? prefetchedCache : {},
          suspense
        }
      },
      children
    );
  }
}
var PrepassContext = React.createContext(false);
function PlasmicPrepassContext(props) {
  const { cache, children } = props;
  return /* @__PURE__ */ React.createElement(PrepassContext.Provider, { value: true }, /* @__PURE__ */ React.createElement(
    SWRConfig,
    {
      value: {
        provider: () => cache,
        suspense: true,
        fallback: {}
      }
    },
    children
  ));
}
var usePlasmicDataConfig = useSWRConfig;
var loadingCount = 0;
var listeners = [];
function addLoadingStateListener(listener, opts) {
  listeners.push(listener);
  if (opts == null ? void 0 : opts.immediate) {
    listener(loadingCount > 0);
  }
  return () => {
    listeners.splice(listeners.indexOf(listener), 1);
  };
}
function wrapLoadingFetcher(fetcher) {
  return (...args) => __async(this, null, function* () {
    if (loadingCount === 0) {
      listeners.forEach((listener) => listener(true));
    }
    loadingCount += 1;
    try {
      const res = fetcher(...args);
      return isPromiseLike(res) ? yield res : res;
    } finally {
      loadingCount -= 1;
      if (loadingCount === 0) {
        listeners.forEach((listener) => listener(false));
      }
    }
  });
}
function isPromiseLike(x) {
  return !!x && typeof x === "object" && "then" in x && typeof x.then === "function";
}
function isPlasmicPrepass() {
  var _a, _b, _c;
  return !!((_c = (_b = (_a = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) == null ? void 0 : _a.ReactCurrentDispatcher) == null ? void 0 : _b.current) == null ? void 0 : _c.isPlasmicPrepass);
}
var HeadMetadataContext = React.createContext({});

// src/index.tsx
import { useSWRConfig as useSWRConfig2 } from "swr";
if (typeof window !== "undefined") {
  const root = window;
  const maybeExistingMutateAllKeys = root.__SWRMutateAllKeys;
  root.__SWRMutateAllKeys = (invalidateKey) => {
    mutateKeys(invalidateKey);
    if (typeof maybeExistingMutateAllKeys === "function") {
      maybeExistingMutateAllKeys(invalidateKey);
    }
  };
}
export {
  HeadMetadataContext,
  PlasmicPrepassContext,
  PlasmicQueryDataProvider,
  addLoadingStateListener,
  isPlasmicPrepass,
  useMutablePlasmicQueryData,
  usePlasmicDataConfig,
  usePlasmicQueryData,
  useSWRConfig2 as useSWRConfig,
  wrapLoadingFetcher
};
//# sourceMappingURL=index.esm.js.map
