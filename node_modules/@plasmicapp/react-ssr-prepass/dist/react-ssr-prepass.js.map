{"version":3,"file":"react-ssr-prepass.js","sources":["../src/symbols.js","../src/element.js","../src/internals/context.js","../src/internals/error.js","../src/internals/state.js","../src/internals/objectIs.js","../src/internals/dispatcher.js","../src/render/lazyComponent.js","../src/utils.js","../src/render/functionComponent.js","../src/render/classComponent.js","../src/render/clientReference.js","../src/visitor.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport type { Node } from 'react'\n\nlet Element = 0xeac7\nlet Portal = 0xeaca\nlet Fragment = 0xeacb\nlet StrictMode = 0xeacc\nlet Profiler = 0xead2\nlet ContextProvider = 0xeacd\nlet ContextConsumer = 0xeace\nlet ConcurrentMode = 0xeacf\nlet ForwardRef = 0xead0\nlet Suspense = 0xead1\nlet Memo = 0xead3\nlet Lazy = 0xead4\nlet ClientReferenceTag = undefined\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for\n  Element = symbolFor('react.element')\n  Portal = symbolFor('react.portal')\n  Fragment = symbolFor('react.fragment')\n  StrictMode = symbolFor('react.strict_mode')\n  Profiler = symbolFor('react.profiler')\n  ContextProvider = symbolFor('react.provider')\n  ContextConsumer = symbolFor('react.context')\n  ConcurrentMode = Symbol.for('react.concurrent_mode')\n  ForwardRef = symbolFor('react.forward_ref')\n  Suspense = symbolFor('react.suspense')\n  Memo = symbolFor('react.memo')\n  Lazy = symbolFor('react.lazy')\n  ClientReferenceTag = Symbol.for('react.client.reference')\n}\n\n/** Literal types representing the ReactSymbol values. These values do not actually match the values from react-is! */\nexport type ReactSymbol =\n  | 'react.element' /* 0xeac7 | Symbol(react.element) */\n  | 'react.portal' /* 0xeaca | Symbol(react.portal) */\n  | 'react.fragment' /* 0xeacb | Symbol(react.fragment) */\n  | 'react.strict_mode' /* 0xeacc | Symbol(react.strict_mode) */\n  | 'react.profiler' /* 0xead2 | Symbol(react.profiler) */\n  | 'react.provider' /* 0xeacd | Symbol(react.provider) */\n  | 'react.context' /* 0xeace | Symbol(react.context) */\n  | 'react.concurrent_mode' /* 0xeacf | Symbol(react.concurrent_mode) */\n  | 'react.forward_ref' /* 0xead0 | Symbol(react.forward_ref) */\n  | 'react.suspense' /* 0xead1 | Symbol(react.suspense) */\n  | 'react.memo' /* 0xead3 | Symbol(react.memo) */\n  | 'react.lazy' /* 0xead4 | Symbol(react.lazy) */\n\nexport const REACT_ELEMENT_TYPE: 'react.element' = (Element: any)\nexport const REACT_PORTAL_TYPE: 'react.portal' = (Portal: any)\nexport const REACT_FRAGMENT_TYPE: 'react.fragment' = (Fragment: any)\nexport const REACT_STRICT_MODE_TYPE: 'react.strict_mode' = (StrictMode: any)\nexport const REACT_PROFILER_TYPE: 'react.profiler' = (Profiler: any)\nexport const REACT_PROVIDER_TYPE: 'react.provider' = (ContextProvider: any)\nexport const REACT_CONTEXT_TYPE: 'react.context' = (ContextConsumer: any)\nexport const REACT_CONCURRENT_MODE_TYPE: 'react.concurrent_mode' =\n  (ConcurrentMode: any)\nexport const REACT_FORWARD_REF_TYPE: 'react.forward_ref' = (ForwardRef: any)\nexport const REACT_SUSPENSE_TYPE: 'react.suspense' = (Suspense: any)\nexport const REACT_MEMO_TYPE: 'react.memo' = (Memo: any)\nexport const REACT_LAZY_TYPE: 'react.lazy' = (Lazy: any)\nexport const CLIENT_REFERENCE_TAG: 'react.client.reference' =\n  (ClientReferenceTag: any)\n","// @flow\n\nimport { Children, type Node, type Element, type ComponentType } from 'react'\nimport type { AbstractContext, AbstractElement } from './types'\n\nimport {\n  type ReactSymbol,\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\n/** Is a given Component a class component */\nexport const shouldConstruct = (Comp: ComponentType<*>): boolean %checks =>\n  (Comp: any).prototype && (Comp: any).prototype.isReactComponent\n\n/** Determine the type of element using react-is with applied fixes */\nexport const typeOf = (x: AbstractElement): ReactSymbol | void => {\n  switch (x.$$typeof) {\n    case REACT_PORTAL_TYPE:\n      return REACT_PORTAL_TYPE\n    case REACT_ELEMENT_TYPE:\n      switch (x.type) {\n        case REACT_CONCURRENT_MODE_TYPE:\n          return REACT_CONCURRENT_MODE_TYPE\n        case REACT_FRAGMENT_TYPE:\n          return REACT_FRAGMENT_TYPE\n        case REACT_PROFILER_TYPE:\n          return REACT_PROFILER_TYPE\n        case REACT_STRICT_MODE_TYPE:\n          return REACT_STRICT_MODE_TYPE\n        case REACT_SUSPENSE_TYPE:\n          return REACT_SUSPENSE_TYPE\n\n        default: {\n          switch (x.type && ((x.type: any).$$typeof: ReactSymbol)) {\n            case REACT_LAZY_TYPE:\n              return REACT_LAZY_TYPE\n            case REACT_MEMO_TYPE:\n              return REACT_MEMO_TYPE\n            case REACT_CONTEXT_TYPE:\n              return REACT_CONTEXT_TYPE\n            case REACT_PROVIDER_TYPE:\n              return REACT_PROVIDER_TYPE\n            case REACT_FORWARD_REF_TYPE:\n              return REACT_FORWARD_REF_TYPE\n            default:\n              return REACT_ELEMENT_TYPE\n          }\n        }\n      }\n\n    default:\n      return undefined\n  }\n}\n\ntype ScalarNode = null | boolean | string | number\n\n/** Rebound Children.toArray with modified AbstractElement types */\nconst toArray: (node?: Node) => Array<ScalarNode | AbstractElement> =\n  Children.toArray\n\n/** Checks whether the `node` is an AbstractElement */\nconst isAbstractElement = (\n  node: ScalarNode | AbstractElement\n): boolean %checks => node !== null && typeof node === 'object'\n\n/** Returns a flat AbstractElement array for a given AbstractElement node */\nexport const getChildrenArray = (node?: Node): AbstractElement[] => {\n  // $FlowFixMe\n  return toArray(node).filter(isAbstractElement)\n}\n\n/** Returns merged props given a props and defaultProps object */\nexport const computeProps = (props: Object, defaultProps: void | Object) => {\n  return typeof defaultProps === 'object'\n    ? Object.assign({}, defaultProps, props)\n    : props\n}\n","// @flow\n\nimport type {\n  AbstractContext,\n  UserElement,\n  ContextMap,\n  ContextStore,\n  ContextEntry\n} from '../types'\n\n/** The context is kept as a Map from a Context value to the current\n   value on the React element tree.\n   The legacy context is kept as a simple object.\n   When the tree is being walked modifications are made by assigning\n   new legacy context maps or new context values.\n   These changes are kept in the `prev` variables and must be flushed\n   before continuing to walk the tree.\n   After walking the children they can be restored.\n   This way the context recursively restores itself on the way up. */\n\nlet currentContextStore: ContextStore = new Map()\nlet currentContextMap: ContextMap = {}\n\nlet prevContextMap: void | ContextMap = undefined\nlet prevContextEntry: void | ContextEntry = undefined\n\nexport const getCurrentContextMap = (): ContextMap =>\n  Object.assign({}, currentContextMap)\nexport const getCurrentContextStore = (): ContextStore =>\n  new Map(currentContextStore)\n\nexport const flushPrevContextMap = (): void | ContextMap => {\n  const prev = prevContextMap\n  prevContextMap = undefined\n  return prev\n}\n\nexport const flushPrevContextStore = (): void | ContextEntry => {\n  const prev = prevContextEntry\n  prevContextEntry = undefined\n  return prev\n}\n\nexport const restoreContextMap = (prev: void | ContextMap) => {\n  if (prev !== undefined) {\n    Object.assign(currentContextMap, prev)\n  }\n}\n\nexport const restoreContextStore = (prev: void | ContextEntry) => {\n  if (prev !== undefined) {\n    currentContextStore.set(prev[0], prev[1])\n  }\n}\n\nexport const setCurrentContextMap = (map: ContextMap) => {\n  prevContextMap = undefined\n  currentContextMap = map\n}\n\nexport const setCurrentContextStore = (store: ContextStore) => {\n  prevContextEntry = undefined\n  currentContextStore = store\n}\n\nexport const assignContextMap = (map: ContextMap) => {\n  prevContextMap = {}\n  for (const name in map) {\n    prevContextMap[name] = currentContextMap[name]\n    currentContextMap[name] = map[name]\n  }\n}\n\nexport const setContextValue = (context: AbstractContext, value: mixed) => {\n  prevContextEntry = [context, currentContextStore.get(context)]\n  currentContextStore.set(context, value)\n}\n\nexport const readContextValue = (context: AbstractContext) => {\n  const value = currentContextStore.get(context)\n  if (value !== undefined) {\n    return value\n  }\n\n  // Return default if context has no value yet\n  return context._currentValue\n}\n\nconst emptyContext = {}\n\nexport const maskContext = (type: $PropertyType<UserElement, 'type'>) => {\n  const { contextType, contextTypes } = type\n\n  if (contextType) {\n    return readContextValue(contextType)\n  } else if (!contextTypes) {\n    return emptyContext\n  }\n\n  const maskedContext = {}\n  for (const name in contextTypes) {\n    maskedContext[name] = currentContextMap[name]\n  }\n\n  return maskedContext\n}\n","// @flow\n\nimport type { ClassFrame } from '../types'\n\n/** The current error boundary frame determines where to continue rendering when an error is raised */\nlet currentErrorFrame: null | ClassFrame = null\n\nexport const getCurrentErrorFrame = (): ClassFrame | null => currentErrorFrame\n\nexport const setCurrentErrorFrame = (frame?: ClassFrame | null) => {\n  currentErrorFrame = frame || null\n}\n","// @flow\n\nimport type { RendererState } from '../types'\n\n/** The current global renderer state per render cycle */\nexport const rendererStateRef: {| current: RendererState |} = {\n  current: { uniqueID: 0 }\n}\nexport const initRendererState = (): RendererState =>\n  (rendererStateRef.current = { uniqueID: 0 })\nexport const setCurrentRendererState = (state: RendererState) =>\n  (rendererStateRef.current = state)\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  )\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is\n\nexport default objectIs\n","// @flow\n// Source: https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js\n\nimport { readContextValue } from './context'\nimport { rendererStateRef } from './state'\nimport is from './objectIs'\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  AbstractContext,\n  BasicStateAction,\n  Dispatch,\n  Update,\n  UpdateQueue,\n  Hook\n} from '../types'\n\nexport opaque type Identity = {}\nexport opaque type OpaqueIDType = string\n\nlet currentIdentity: Identity | null = null\n\nexport const makeIdentity = (): Identity => ({})\n\nexport const setCurrentIdentity = (id: Identity | null) => {\n  currentIdentity = id\n}\n\nexport const getCurrentIdentity = (): Identity => {\n  if (currentIdentity === null) {\n    throw new Error(\n      '[react-ssr-prepass] Hooks can only be called inside the body of a function component. ' +\n        '(https://fb.me/react-invalid-hook-call)'\n    )\n  }\n\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L63-L71\n\n  return (currentIdentity: Identity)\n}\n\nlet firstWorkInProgressHook: Hook | null = null\nlet workInProgressHook: Hook | null = null\n// Whether an update was scheduled during the currently executing render pass.\nlet didScheduleRenderPhaseUpdate: boolean = false\n// Lazily created map of render-phase updates\nlet renderPhaseUpdates: Map<UpdateQueue<any>, Update<any>> | null = null\n// Counter to prevent infinite loops.\nlet numberOfReRenders: number = 0\nconst RE_RENDER_LIMIT = 25\n\nexport const getFirstHook = (): Hook | null => firstWorkInProgressHook\n\nexport const setFirstHook = (hook: Hook | null) => {\n  firstWorkInProgressHook = hook\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null\n) {\n  // NOTE: The warnings that are used in ReactPartialRendererHooks are obsolete\n  // in a prepass, since these issues will be caught by a subsequent renderer anyway\n  if (prevDeps === null) return false\n\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (!is(nextDeps[i], prevDeps[i])) return false\n  }\n\n  return true\n}\n\nfunction createHook(): Hook {\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  }\n}\n\nfunction createWorkInProgressHook(): Hook {\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    if (firstWorkInProgressHook === null) {\n      return (firstWorkInProgressHook = workInProgressHook = createHook())\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      return (workInProgressHook = firstWorkInProgressHook)\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      // Append to the end of the list\n      return (workInProgressHook = workInProgressHook.next = createHook())\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      return (workInProgressHook = workInProgressHook.next)\n    }\n  }\n}\n\nexport function renderWithHooks(\n  Component: any,\n  props: any,\n  refOrContext: any\n): any {\n  workInProgressHook = null\n  let children = Component(props, refOrContext)\n\n  // NOTE: Excessive rerenders won't throw but will instead abort rendering\n  // since a subsequent renderer can throw when this issue occurs instead\n  while (numberOfReRenders < RE_RENDER_LIMIT && didScheduleRenderPhaseUpdate) {\n    // Updates were scheduled during the render phase. They are stored in\n    // the `renderPhaseUpdates` map. Call the component again, reusing the\n    // work-in-progress hooks and applying the additional updates on top. Keep\n    // restarting until no more updates are scheduled.\n    didScheduleRenderPhaseUpdate = false\n    numberOfReRenders += 1\n    // Start over from the beginning of the list\n    workInProgressHook = null\n    children = Component(props, refOrContext)\n  }\n\n  // This will be reset by renderer\n  // firstWorkInProgressHook = null\n\n  numberOfReRenders = 0\n  renderPhaseUpdates = null\n  workInProgressHook = null\n\n  return children\n}\n\nfunction readContext(context: AbstractContext, _: void | number | boolean) {\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L215-L223\n  return readContextValue(context)\n}\n\nfunction useContext(context: AbstractContext, _: void | number | boolean) {\n  getCurrentIdentity()\n  return readContextValue(context)\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe\n  return typeof action === 'function' ? action(state) : action\n}\n\nfunction useState<S>(\n  initialState: (() => S) | S\n): [S, Dispatch<BasicStateAction<S>>] {\n  return useReducer(\n    basicStateReducer,\n    // useReducer has a special case to support lazy useState initializers\n    (initialState: any)\n  )\n}\n\nfunction useReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: (I) => S\n): [S, Dispatch<A>] {\n  const id = getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  // In the case of a re-render after a suspense, the initial state\n  // may not be set, so instead of initialising if `!isRerender`, we\n  // check whether `queue` is set\n  if (workInProgressHook.queue === null) {\n    let initialState\n    if (reducer === basicStateReducer) {\n      // Special case for `useState`.\n      initialState =\n        typeof initialArg === 'function'\n          ? ((initialArg: any): () => S)()\n          : ((initialArg: any): S)\n    } else {\n      initialState =\n        init !== undefined ? init(initialArg) : ((initialArg: any): S)\n    }\n\n    workInProgressHook.memoizedState = initialState\n  }\n\n  const queue: UpdateQueue<A> =\n    workInProgressHook.queue ||\n    (workInProgressHook.queue = { last: null, dispatch: null })\n  const dispatch: Dispatch<A> =\n    queue.dispatch || (queue.dispatch = dispatchAction.bind(null, id, queue))\n\n  if (renderPhaseUpdates !== null) {\n    // This is a re-render. Apply the new render phase updates to the previous\n    // current hook.\n    // Render phase updates are stored in a map of queue -> linked list\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate !== undefined) {\n      renderPhaseUpdates.delete(queue)\n      let newState = workInProgressHook.memoizedState\n      let update = firstRenderPhaseUpdate\n      do {\n        // Process this render phase update. We don't have to check the\n        // priority because it will always be the same as the current\n        // render's.\n        const action = update.action\n        newState = reducer(newState, action)\n        update = update.next\n      } while (update !== null)\n\n      workInProgressHook.memoizedState = newState\n    }\n  }\n\n  return [workInProgressHook.memoizedState, dispatch]\n}\n\nfunction useMemo<T>(nextCreate: () => T, deps: Array<mixed> | void | null): T {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  const nextDeps = deps === undefined ? null : deps\n  const prevState = workInProgressHook.memoizedState\n  if (prevState !== null && nextDeps !== null) {\n    const prevDeps = prevState[1]\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0]\n    }\n  }\n\n  const nextValue = nextCreate()\n  workInProgressHook.memoizedState = [nextValue, nextDeps]\n  return nextValue\n}\n\nfunction useRef<T>(initialValue: T): { current: T } {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n  const previousRef = workInProgressHook.memoizedState\n  if (previousRef === null) {\n    const ref = { current: initialValue }\n    workInProgressHook.memoizedState = ref\n    return ref\n  } else {\n    return previousRef\n  }\n}\n\nfunction useOpaqueIdentifier(): OpaqueIDType {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n  if (!workInProgressHook.memoizedState)\n    workInProgressHook.memoizedState =\n      'R:' + (rendererStateRef.current.uniqueID++).toString(36)\n  return workInProgressHook.memoizedState\n}\n\nfunction dispatchAction<A>(\n  componentIdentity: Identity,\n  queue: UpdateQueue<A>,\n  action: A\n) {\n  if (componentIdentity === currentIdentity) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdate = true\n    const update: Update<A> = {\n      action,\n      next: null\n    }\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map()\n    }\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate === undefined) {\n      renderPhaseUpdates.set(queue, update)\n    } else {\n      // Append the update to the end of the list.\n      let lastRenderPhaseUpdate = firstRenderPhaseUpdate\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next\n      }\n      lastRenderPhaseUpdate.next = update\n    }\n  } else {\n    // This means an update has happened after the function component has\n    // returned. On the server this is a no-op. In React Fiber, the update\n    // would be scheduled for a future render.\n  }\n}\n\nfunction useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  return useMemo(() => callback, deps)\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  _subscribe: MutableSourceSubscribeFn<Source, Snapshot>\n): Snapshot {\n  getCurrentIdentity()\n  return getSnapshot(source._source)\n}\n\nfunction noop(): void {}\n\nfunction useTransition(): [(callback: () => void) => void, boolean] {\n  const startTransition = (callback) => {\n    callback()\n  }\n  return [startTransition, false]\n}\n\nfunction useDeferredValue<T>(input: T): T {\n  return input\n}\n\n// See: https://github.com/facebook/react/blob/fe41934/packages/use-sync-external-store/src/useSyncExternalStoreShimServer.js#L10-L20\nfunction useSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot()\n}\n\nexport const Dispatcher = {\n  readContext,\n  useSyncExternalStore,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n  useCallback,\n  useMutableSource,\n  useTransition,\n  useDeferredValue,\n  useOpaqueIdentifier,\n  // aliased for now\n  // see: https://github.com/FormidableLabs/react-ssr-prepass/pull/75\n  useId: useOpaqueIdentifier,\n  unstable_useId: useOpaqueIdentifier,\n  unstable_useOpaqueIdentifier: useOpaqueIdentifier,\n  // ignore useLayout effect completely as usage of it will be caught\n  // in a subsequent render pass\n  useLayoutEffect: noop,\n  // useImperativeHandle is not run in the server environment\n  useImperativeHandle: noop,\n  // Effects are not run in the server environment.\n  useEffect: noop,\n  // Debugging effect\n  useDebugValue: noop,\n  // Don't care about css-in-js\n  useInsertionEffect: noop,\n  isPlasmicPrepass: true\n}\n","// @flow\n\nimport { createElement, type Node } from 'react'\nimport type {\n  LazyComponent,\n  LazyComponentPayload,\n  DefaultProps,\n  LazyFrame,\n  Frame\n} from '../types'\nimport { getChildrenArray } from '../element'\n\nimport {\n  setCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame\n} from '../internals'\n\nconst resolve = (type: LazyComponent): Promise<void> => {\n  const payload = (type._payload || type: any)\n  if (payload._status === 0) {\n    return payload._result\n  } else if (payload._status === 1) {\n    return Promise.resolve(payload._result)\n  } else if (payload._status === 2) {\n    return Promise.reject(payload._result)\n  }\n\n  payload._status = 0 /* PENDING */\n\n  return (payload._result = (payload._ctor || payload._result)()\n    .then((Component) => {\n      payload._result = Component\n      if (typeof Component === 'function') {\n        payload._status = 1 /* SUCCESSFUL */\n      } else if (\n        Component !== null &&\n        typeof Component === 'object' &&\n        typeof Component.default === 'function'\n      ) {\n        payload._result = Component.default\n        payload._status = 1 /* SUCCESSFUL */\n      } else {\n        payload._status = 2 /* FAILED */\n      }\n    })\n    .catch((error) => {\n      payload._status = 2 /* FAILED */\n      payload._result = error\n      return Promise.reject(error)\n    }))\n}\n\nconst makeFrame = (\n  type: LazyComponent,\n  props: DefaultProps,\n  thenable: Promise<any>\n) => ({\n  kind: 'frame.lazy',\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  errorFrame: getCurrentErrorFrame(),\n  thenable,\n  props,\n  type\n})\n\nconst render = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // Component has previously been fetched successfully,\n  // so create the element with passed props and return it\n  const payload = ((type._payload || type: any): LazyComponentPayload)\n  if (payload._status === 1 && payload._result) {\n    return createElement(payload._result, props)\n  }\n\n  try {\n    return createElement((type: any)._init((type: any)._payload), props)\n  } catch (err) {\n    if (!!err && typeof err.then === 'function') {\n      queue.push(makeFrame(type, props, err))\n    }\n    return null\n  }\n}\n\nexport const mount = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // If the component has not been fetched yet, suspend this component\n  const payload = ((type._payload || type: any): LazyComponentPayload)\n  // For lazy components from resolved modules (e.g. Client Components)\n  // The `payload._status` is null.\n  // Reference code for \"normal\" lazy components: https://github.com/facebook/react/blob/main/packages/react/src/ReactLazy.js#L53\n  // Reference code for Client Component chunks: https://github.com/facebook/react/blob/main/packages/react-client/src/ReactFlightClient.js#L955\n  if (payload._status != null && payload._status <= 0) {\n    queue.push(makeFrame(type, props, resolve(type)))\n\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\nexport const update = (queue: Frame[], frame: LazyFrame): Node => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport { shouldConstruct } from './element'\nimport { CLIENT_REFERENCE_TAG } from './symbols'\nimport type { ComponentType } from 'react'\nimport type { DefaultProps, ComponentStatics } from './types'\n\nexport function isClientReference(reference: Object): boolean {\n  return reference.$$typeof === CLIENT_REFERENCE_TAG\n}\n\nexport const getComponentName = (\n  type: ComponentType<DefaultProps> & ComponentStatics\n): any => {\n  if (isClientReference(type)) {\n    return undefined\n  }\n  if (type.displayName) {\n    return type.displayName\n  }\n  if (shouldConstruct(type)) {\n    return type.constructor.name\n  } else {\n    return type.name\n  }\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Hook,\n  Frame,\n  HooksFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  type Identity,\n  maskContext,\n  makeIdentity,\n  setCurrentIdentity,\n  getCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  renderWithHooks,\n  setFirstHook,\n  getFirstHook\n} from '../internals'\nimport { getComponentName } from '../utils'\n\nconst makeFrame = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  thenable: Promise<any>\n) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  id: getCurrentIdentity(),\n  hook: getFirstHook(),\n  kind: 'frame.hooks',\n  errorFrame: getCurrentErrorFrame(),\n  thenable,\n  props,\n  type\n})\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  try {\n    return renderWithHooks(\n      type,\n      computeProps(props, type.defaultProps),\n      maskContext(type)\n    )\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      console.warn(\n        `PLASMIC: Encountered error when pre-rendering ${getComponentName(\n          type\n        )}: ${error}`\n      )\n      return null\n    }\n\n    queue.push(makeFrame(type, props, error))\n    return null\n  }\n}\n\n/** Mount a function component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n): Node => {\n  setFirstHook(null)\n  setCurrentIdentity(makeIdentity())\n\n  const promise = visitor(element)\n  if (promise) {\n    queue.push(makeFrame(type, props, promise))\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\n/** Update a previously suspended function component */\nexport const update = (queue: Frame[], frame: HooksFrame) => {\n  setFirstHook(frame.hook)\n  setCurrentIdentity(frame.id)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Frame,\n  ClassFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  maskContext,\n  assignContextMap,\n  setCurrentIdentity,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame\n} from '../internals'\nimport { getComponentName } from '../utils'\n\nconst RE_RENDER_LIMIT = 25\n\nconst createUpdater = () => {\n  const queue = []\n\n  return {\n    _thrown: 0,\n    queue,\n    isMounted: () => false,\n    enqueueForceUpdate: () => null,\n    enqueueReplaceState: (instance, completeState) => {\n      if (instance._isMounted) {\n        queue.length = 0\n        queue.push(completeState)\n      }\n    },\n    enqueueSetState: (instance, currentPartialState) => {\n      if (instance._isMounted) {\n        queue.push(currentPartialState)\n      }\n    }\n  }\n}\n\nconst flushEnqueuedState = (instance: any) => {\n  const queue = (instance.updater.queue: any[])\n\n  if (queue.length > 0) {\n    let nextState = Object.assign({}, instance.state)\n\n    for (let i = 0, l = queue.length; i < l; i++) {\n      const partial = queue[i]\n      const partialState =\n        typeof partial === 'function'\n          ? partial.call(instance, nextState, instance.props, instance.context)\n          : partial\n      if (partialState !== null) {\n        Object.assign(nextState, partialState)\n      }\n    }\n\n    instance.state = nextState\n    queue.length = 0\n  }\n}\n\nconst createInstance = (type: any, props: DefaultProps) => {\n  const updater = createUpdater()\n  const computedProps = computeProps(props, type.defaultProps)\n  const context = maskContext(type)\n  const instance = new type(computedProps, context, updater)\n\n  instance.props = computedProps\n  instance.context = context\n  instance.updater = updater\n  instance._isMounted = true\n\n  if (instance.state === undefined) {\n    instance.state = null\n  }\n\n  if (\n    typeof instance.componentDidCatch === 'function' ||\n    typeof type.getDerivedStateFromError === 'function'\n  ) {\n    const frame = makeFrame(type, instance, null)\n    frame.errorFrame = frame\n    setCurrentErrorFrame(frame)\n  }\n\n  if (typeof type.getDerivedStateFromProps === 'function') {\n    const { getDerivedStateFromProps } = type\n    const state = getDerivedStateFromProps(instance.props, instance.state)\n    if (state !== null && state !== undefined) {\n      instance.state = Object.assign({}, instance.state, state)\n    }\n  } else if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount()\n  } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount()\n  }\n\n  return instance\n}\n\nconst makeFrame = (\n  type: any,\n  instance: any,\n  thenable: Promise<any> | null\n) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  errorFrame: getCurrentErrorFrame(),\n  thenable,\n  kind: 'frame.class',\n  error: null,\n  instance,\n  type\n})\n\nconst render = (type: any, instance: any, queue: Frame[]) => {\n  // Flush all queued up state changes\n  flushEnqueuedState(instance)\n  let child: Node = null\n\n  try {\n    child = instance.render()\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      console.warn(\n        `PLASMIC: Encountered error when pre-rendering component ${getComponentName(\n          type\n        )}. This is fine as long as you are not fetching data with @plasmicapp/query inside this component.  Error: ${error}`\n      )\n      return null\n    }\n\n    queue.push(makeFrame(type, instance, error))\n    return null\n  }\n\n  if (\n    type.childContextTypes !== undefined &&\n    typeof instance.getChildContext === 'function'\n  ) {\n    const childContext = instance.getChildContext()\n    if (childContext !== null && typeof childContext === 'object') {\n      assignContextMap(childContext)\n    }\n  }\n\n  if (\n    typeof instance.getDerivedStateFromProps !== 'function' &&\n    (typeof instance.componentWillMount === 'function' ||\n      typeof instance.UNSAFE_componentWillMount === 'function') &&\n    typeof instance.componentWillUnmount === 'function'\n  ) {\n    try {\n      instance.componentWillUnmount()\n    } catch (_err) {}\n  }\n\n  instance._isMounted = false\n  return child\n}\n\n/** Mount a class component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  setCurrentIdentity(null)\n\n  const instance = createInstance(type, props)\n  const promise = visitor(element, instance)\n  if (promise) {\n    queue.push(makeFrame(type, instance, promise))\n    return null\n  }\n\n  return render(type, instance, queue)\n}\n\n/** Update a previously suspended class component */\nexport const update = (queue: Frame[], frame: ClassFrame) => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n\n  if (frame.error) {\n    // We simply have to bail when a loop occurs\n    if (++frame.instance.updater._thrown >= RE_RENDER_LIMIT) return null\n\n    frame.instance._isMounted = true\n\n    if (typeof frame.instance.componentDidCatch === 'function') {\n      frame.instance.componentDidCatch(frame.error)\n    }\n\n    if (typeof frame.type.getDerivedStateFromError === 'function') {\n      frame.instance.updater.enqueueSetState(\n        frame.instance,\n        frame.type.getDerivedStateFromError(frame.error)\n      )\n    }\n  }\n\n  return render(frame.type, frame.instance, queue)\n}\n","// @flow\n\nimport React, { type Node, type ComponentType, createElement } from 'react'\nimport { computeProps, getChildrenArray, typeOf } from '../element'\n\nimport type {\n  Visitor,\n  Hook,\n  Frame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement,\n  ClientReference,\n  ClientReferenceElement,\n  ClientReferenceVisitor,\n  ClientRefFrame\n} from '../types'\n\nimport {\n  type Identity,\n  maskContext,\n  makeIdentity,\n  setCurrentIdentity,\n  getCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  renderWithHooks,\n  setFirstHook,\n  getFirstHook\n} from '../internals'\nimport { getComponentName } from '../utils'\n\n// When rendering RSC, we cannot access client components directly and only\n// see a client reference. We support using a visitor instead to behave as the\n// client component would, possibly throwing promises, using hooks or contexts\n// (whose read/write functions are exposed via `globalThis.__ssrPrepassEnv`),\n// and returning a new node element.\nconst render = (\n  type: ClientReference,\n  props: DefaultProps,\n  queue: Frame[],\n  clientRefVisitor: ClientReferenceVisitor,\n  element: ClientReferenceElement\n): Node => {\n  try {\n    const node = clientRefVisitor((element: any))\n    // We cannot access client component references in RSC phase, so we just\n    // render the props (or whatever node has been returned by the visitor)\n    return createElement(React.Fragment, ({}: any), [\n      ...(node\n        ? getChildrenArray((node: any))\n        : (Object.values(props)\n            .flat(Infinity)\n            .filter(\n              (elt) => elt && typeof elt === 'object' && typeOf((elt: any))\n            ): any))\n    ])\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      console.warn(\n        `PLASMIC: Encountered error when pre-rendering client reference: ${error}`\n      )\n      return null\n    }\n\n    queue.push({\n      contextMap: getCurrentContextMap(),\n      contextStore: getCurrentContextStore(),\n      errorFrame: getCurrentErrorFrame(),\n      id: getCurrentIdentity(),\n      hook: getFirstHook(),\n      thenable: error,\n      kind: 'client-ref',\n      type,\n      props,\n      element,\n      clientRefVisitor\n    })\n    return null\n  }\n}\n\nexport const mount = (\n  type: ClientReference,\n  props: DefaultProps,\n  queue: Frame[],\n  clientRefVisitor: ClientReferenceVisitor,\n  element: ClientReferenceElement\n): Node => {\n  setFirstHook(null)\n  setCurrentIdentity(makeIdentity())\n\n  return render(type, props, queue, clientRefVisitor, element)\n}\n\nexport const update = (queue: Frame[], frame: ClientRefFrame): Node => {\n  setFirstHook(frame.hook)\n  setCurrentIdentity(frame.id)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  setCurrentErrorFrame(frame.errorFrame)\n  return render(\n    frame.type,\n    frame.props,\n    queue,\n    frame.clientRefVisitor,\n    frame.element\n  )\n}\n","// @flow\n\nimport React, { type Node, type ComponentType, createElement } from 'react'\n\nimport {\n  typeOf,\n  shouldConstruct,\n  getChildrenArray,\n  computeProps\n} from './element'\n\nimport {\n  mountFunctionComponent,\n  updateFunctionComponent,\n  mountClassComponent,\n  updateClassComponent,\n  mountLazyComponent,\n  updateLazyComponent,\n  mountClientReference,\n  updateClientReference\n} from './render'\n\nimport type {\n  Visitor,\n  ClientReferenceVisitor,\n  YieldFrame,\n  ClassFrame,\n  Frame,\n  ContextMap,\n  ContextEntry,\n  DefaultProps,\n  ComponentStatics,\n  LazyElement,\n  AbstractElement,\n  ConsumerElement,\n  ProviderElement,\n  FragmentElement,\n  SuspenseElement,\n  ForwardRefElement,\n  MemoElement,\n  UserElement,\n  DOMElement,\n  ClientReferenceElement,\n  ClientReference\n} from './types'\n\nimport {\n  getCurrentContextMap,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  setCurrentContextStore,\n  flushPrevContextMap,\n  flushPrevContextStore,\n  restoreContextMap,\n  restoreContextStore,\n  readContextValue,\n  setContextValue,\n  setCurrentIdentity,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  Dispatcher,\n  setFirstHook,\n  getCurrentIdentity,\n  getFirstHook\n} from './internals'\n\nimport {\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\nimport { isClientReference } from './utils'\n\nconst { ReactCurrentDispatcher } = (React: any)\n  .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\n// In the presence of setImmediate, i.e. on Node, we'll enable the\n// yielding behavior that gives the event loop a chance to continue\n// running when the prepasses would otherwise take too long\nexport const SHOULD_YIELD = typeof setImmediate === 'function'\n// Time in ms after which the otherwise synchronous visitor yields so that\n// the event loop is not interrupted for too long\nconst YIELD_AFTER_MS = 5\n\nconst render = (\n  type: (ComponentType<DefaultProps> & ComponentStatics) | ClientReference,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  clientRefVisitor: ClientReferenceVisitor,\n  element: UserElement | ClientReferenceElement\n) => {\n  if (isClientReference(type)) {\n    return mountClientReference(\n      (type: any),\n      props,\n      queue,\n      clientRefVisitor,\n      (element: any)\n    )\n  }\n  return shouldConstruct((type: any))\n    ? mountClassComponent((type: any), props, queue, visitor, (element: any))\n    : mountFunctionComponent((type: any), props, queue, visitor, (element: any))\n}\n\nexport const visitElement = (\n  element: AbstractElement,\n  queue: Frame[],\n  visitor: Visitor,\n  clientRefVisitor: ClientReferenceVisitor\n): AbstractElement[] => {\n  switch (typeOf(element)) {\n    case REACT_SUSPENSE_TYPE:\n    case REACT_STRICT_MODE_TYPE:\n    case REACT_CONCURRENT_MODE_TYPE:\n    case REACT_PROFILER_TYPE:\n    case REACT_FRAGMENT_TYPE: {\n      // These element types are simply traversed over but otherwise ignored\n      const fragmentElement = ((element: any):\n        | FragmentElement\n        | SuspenseElement)\n      return getChildrenArray(fragmentElement.props.children)\n    }\n\n    case REACT_PROVIDER_TYPE: {\n      const providerElement = ((element: any): ProviderElement)\n      // Add provider's value prop to context\n      const { value, children } = providerElement.props\n      setContextValue(providerElement.type._context, value)\n\n      return getChildrenArray(children)\n    }\n\n    case REACT_CONTEXT_TYPE: {\n      const consumerElement = ((element: any): ConsumerElement)\n      const { children } = consumerElement.props\n\n      // Read from context and call children, if it's been passed\n      if (typeof children === 'function') {\n        const type = (consumerElement.type: any)\n        const context = typeof type._context === 'object' ? type._context : type\n        const value = readContextValue(context)\n        return getChildrenArray(children(value))\n      } else {\n        return []\n      }\n    }\n\n    case REACT_LAZY_TYPE: {\n      const lazyElement = ((element: any): LazyElement)\n      const type = lazyElement.type\n      const child = mountLazyComponent(type, lazyElement.props, queue)\n      return getChildrenArray(child)\n    }\n\n    case REACT_MEMO_TYPE: {\n      const memoElement = ((element: any): MemoElement)\n      const { type } = memoElement.type\n      const child = createElement((type: any), memoElement.props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_FORWARD_REF_TYPE: {\n      const refElement = ((element: any): ForwardRefElement)\n      const { render: type, defaultProps } = refElement.type\n      const props = computeProps(refElement.props, defaultProps)\n      const child = createElement((type: any), props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_ELEMENT_TYPE: {\n      const el = ((element: any): UserElement | DOMElement)\n      if (typeof el.type === 'string') {\n        // String elements can be skipped, so we just return children\n        return getChildrenArray(el.props.children)\n      } else {\n        const userElement = ((element: any):\n          | UserElement\n          | ClientReferenceElement)\n        const { type, props } = userElement\n        const child = render(\n          type,\n          props,\n          queue,\n          visitor,\n          clientRefVisitor,\n          userElement\n        )\n        return getChildrenArray(child)\n      }\n    }\n\n    case REACT_PORTAL_TYPE:\n    // Portals are unsupported during SSR since they're DOM-only\n    default:\n      return []\n  }\n}\n\nconst visitLoop = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>,\n  traversalErrorFrame: Array<null | ClassFrame>,\n  queue: Frame[],\n  visitor: Visitor,\n  clientRefVisitor: ClientReferenceVisitor\n): boolean => {\n  const prevDispatcher = ReactCurrentDispatcher.current\n  const start = Date.now()\n\n  try {\n    ReactCurrentDispatcher.current = Dispatcher\n    while (traversalChildren.length > 0) {\n      const element = traversalChildren[traversalChildren.length - 1].shift()\n      if (element !== undefined) {\n        const children = visitElement(element, queue, visitor, clientRefVisitor)\n        traversalChildren.push(children)\n        traversalMap.push(flushPrevContextMap())\n        traversalStore.push(flushPrevContextStore())\n        traversalErrorFrame.push(getCurrentErrorFrame())\n      } else {\n        traversalChildren.pop()\n        restoreContextMap(traversalMap.pop())\n        restoreContextStore(traversalStore.pop())\n        setCurrentErrorFrame(traversalErrorFrame.pop())\n      }\n\n      if (SHOULD_YIELD && Date.now() - start > YIELD_AFTER_MS) {\n        return true\n      }\n    }\n\n    return false\n  } catch (error) {\n    const errorFrame = getCurrentErrorFrame()\n    if (!errorFrame) throw error\n    errorFrame.error = error\n    queue.unshift(errorFrame)\n    return false\n  } finally {\n    ReactCurrentDispatcher.current = prevDispatcher\n  }\n}\n\nconst makeYieldFrame = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>,\n  traversalErrorFrame: Array<null | ClassFrame>\n): Frame => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  errorFrame: getCurrentErrorFrame(),\n  thenable: null,\n  kind: 'frame.yield',\n  traversalChildren,\n  traversalMap,\n  traversalStore,\n  traversalErrorFrame\n})\n\nexport const visit = (\n  init: AbstractElement[],\n  queue: Frame[],\n  visitor: Visitor,\n  clientRefVisitor: ClientReferenceVisitor\n) => {\n  const traversalChildren: AbstractElement[][] = [init]\n  const traversalMap: Array<void | ContextMap> = [flushPrevContextMap()]\n  const traversalStore: Array<void | ContextEntry> = [flushPrevContextStore()]\n  const traversalErrorFrame: Array<null | ClassFrame> = [getCurrentErrorFrame()]\n\n  const hasYielded = visitLoop(\n    traversalChildren,\n    traversalMap,\n    traversalStore,\n    traversalErrorFrame,\n    queue,\n    visitor,\n    clientRefVisitor\n  )\n\n  if (hasYielded) {\n    queue.unshift(\n      makeYieldFrame(\n        traversalChildren,\n        traversalMap,\n        traversalStore,\n        traversalErrorFrame\n      )\n    )\n  }\n}\n\nexport const update = (\n  frame: Frame,\n  queue: Frame[],\n  visitor: Visitor,\n  clientRefVisitor: ClientReferenceVisitor\n) => {\n  if (frame.kind === 'frame.yield') {\n    setCurrentIdentity(null)\n    setCurrentContextMap(frame.contextMap)\n    setCurrentContextStore(frame.contextStore)\n    setCurrentErrorFrame(frame.errorFrame)\n\n    const hasYielded = visitLoop(\n      frame.traversalChildren,\n      frame.traversalMap,\n      frame.traversalStore,\n      frame.traversalErrorFrame,\n      queue,\n      visitor,\n      clientRefVisitor\n    )\n\n    if (hasYielded) {\n      queue.unshift(\n        makeYieldFrame(\n          frame.traversalChildren,\n          frame.traversalMap,\n          frame.traversalStore,\n          frame.traversalErrorFrame\n        )\n      )\n    }\n  } else {\n    const prevDispatcher = ReactCurrentDispatcher.current\n    let children = null\n\n    ReactCurrentDispatcher.current = Dispatcher\n\n    try {\n      if (frame.kind === 'frame.class') {\n        children = updateClassComponent(queue, frame)\n      } else if (frame.kind === 'frame.hooks') {\n        children = updateFunctionComponent(queue, frame)\n      } else if (frame.kind === 'frame.lazy') {\n        children = updateLazyComponent(queue, frame)\n      } else if (frame.kind === 'client-ref') {\n        children = updateClientReference(queue, frame)\n      }\n    } catch (error) {\n      const errorFrame = getCurrentErrorFrame()\n      if (!errorFrame) throw error\n      errorFrame.error = error\n      queue.unshift(errorFrame)\n      children = null\n    } finally {\n      ReactCurrentDispatcher.current = prevDispatcher\n    }\n\n    visit(getChildrenArray(children), queue, visitor, clientRefVisitor)\n  }\n}\n","// @flow\n\nimport { type Node, type Element } from 'react'\nimport type {\n  Visitor,\n  ClientReferenceVisitor,\n  YieldFrame,\n  Frame,\n  AbstractElement,\n  RendererState\n} from './types'\nimport { visit, update, SHOULD_YIELD } from './visitor'\nimport { getChildrenArray } from './element'\n\nimport {\n  setCurrentContextStore,\n  setCurrentContextMap,\n  setCurrentErrorFrame,\n  getCurrentErrorFrame,\n  setCurrentRendererState,\n  initRendererState,\n  Dispatcher,\n  readContextValue,\n  setContextValue\n} from './internals'\n\n/** visit() walks all elements (depth-first) and while it walks the\n    element tree some components will suspend and put a `Frame` onto\n    the queue. Hence we recursively look at suspended components in\n    this queue, wait for their promises to resolve, and continue\n    calling visit() on their children. */\nconst flushFrames = (\n  queue: Frame[],\n  visitor: Visitor,\n  clientRefVisitor: ClientReferenceVisitor,\n  state: RendererState\n): Promise<void> => {\n  const frame = queue.shift()\n  if (!frame) {\n    return Promise.resolve()\n  }\n\n  if (SHOULD_YIELD && frame.kind === 'frame.yield') {\n    frame.thenable = new Promise((resolve, reject) => {\n      setImmediate(resolve)\n    })\n  }\n\n  return Promise.resolve(frame.thenable).then(\n    () => {\n      setCurrentRendererState(state)\n      update(frame, queue, visitor, clientRefVisitor)\n      return flushFrames(queue, visitor, clientRefVisitor, state)\n    },\n    (error: Error) => {\n      if (!frame.errorFrame) throw error\n      frame.errorFrame.error = error\n      update(frame.errorFrame, queue, visitor, clientRefVisitor)\n    }\n  )\n}\n\nconst defaultVisitor = () => undefined\n\ndeclare var globalThis: any\n\nlet runningPrepassCount = 0\n\nconst renderPrepass = (\n  element: Node,\n  visitor?: Visitor,\n  clientRefVisitor?: ClientReferenceVisitor\n): Promise<void> => {\n  if (!visitor) visitor = defaultVisitor\n  if (!clientRefVisitor) clientRefVisitor = defaultVisitor\n\n  const queue: Frame[] = []\n  // Renderer state is kept globally but restored and\n  // passed around manually since it isn't dependent on the\n  // render tree\n  const state = initRendererState()\n  // Context state is kept globally and is modified in-place.\n  // Before we start walking the element tree we need to reset\n  // its current state\n  setCurrentContextMap({})\n  setCurrentContextStore(new Map())\n  setCurrentErrorFrame(null)\n\n  try {\n    runningPrepassCount++\n    globalThis.__ssrPrepassEnv = { readContextValue, setContextValue }\n    visit(getChildrenArray(element), queue, visitor, clientRefVisitor)\n  } catch (error) {\n    runningPrepassCount--\n    if (!runningPrepassCount) {\n      delete globalThis.__ssrPrepassEnv\n    }\n    return Promise.reject(error)\n  }\n\n  return flushFrames(queue, visitor, clientRefVisitor, state).finally(() => {\n    runningPrepassCount--\n    if (!runningPrepassCount) {\n      delete globalThis.__ssrPrepassEnv\n    }\n  })\n}\n\nexport default renderPrepass\n"],"names":["let","Element","Portal","Fragment","StrictMode","Profiler","ContextProvider","ContextConsumer","ConcurrentMode","ForwardRef","Suspense","Memo","Lazy","ClientReferenceTag","undefined","Symbol","for","symbolFor","const","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_CONCURRENT_MODE_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","CLIENT_REFERENCE_TAG","shouldConstruct","Comp","prototype","isReactComponent","typeOf","x","$$typeof","type","toArray","Children","isAbstractElement","node","getChildrenArray","filter","computeProps","props","defaultProps","Object","currentContextStore","Map","currentContextMap","prevContextMap","prevContextEntry","getCurrentContextMap","getCurrentContextStore","flushPrevContextMap","prev","flushPrevContextStore","restoreContextMap","restoreContextStore","set","setCurrentContextMap","map","setCurrentContextStore","store","assignContextMap","name","setContextValue","context","value","get","readContextValue","_currentValue","emptyContext","maskContext","contextType","contextTypes","maskedContext","currentErrorFrame","getCurrentErrorFrame","setCurrentErrorFrame","frame","rendererStateRef","current","uniqueID","initRendererState","setCurrentRendererState","state","is","y","objectIs","currentIdentity","makeIdentity","setCurrentIdentity","id","getCurrentIdentity","Error","firstWorkInProgressHook","workInProgressHook","didScheduleRenderPhaseUpdate","renderPhaseUpdates","numberOfReRenders","RE_RENDER_LIMIT","getFirstHook","setFirstHook","hook","areHookInputsEqual","nextDeps","prevDeps","i","length","createHook","memoizedState","queue","next","createWorkInProgressHook","renderWithHooks","Component","refOrContext","children","readContext","_","useContext","basicStateReducer","action","useState","initialState","useReducer","reducer","initialArg","init","last","dispatch","dispatchAction","bind","firstRenderPhaseUpdate","delete","newState","update","useMemo","nextCreate","deps","prevState","nextValue","useRef","initialValue","previousRef","ref","useOpaqueIdentifier","toString","componentIdentity","lastRenderPhaseUpdate","useCallback","callback","useMutableSource","source","getSnapshot","_subscribe","_source","noop","useTransition","startTransition","useDeferredValue","input","useSyncExternalStore","subscribe","getServerSnapshot","Dispatcher","useId","unstable_useId","unstable_useOpaqueIdentifier","useLayoutEffect","useImperativeHandle","useEffect","useDebugValue","useInsertionEffect","isPlasmicPrepass","resolve","payload","_payload","_status","_result","Promise","reject","_ctor","then","default","catch","error","makeFrame","thenable","kind","contextMap","contextStore","errorFrame","render","createElement","_init","err","push","mount","isClientReference","reference","getComponentName","displayName","constructor","console","warn","visitor","element","promise","createUpdater","_thrown","isMounted","enqueueForceUpdate","enqueueReplaceState","instance","completeState","_isMounted","enqueueSetState","currentPartialState","flushEnqueuedState","updater","nextState","l","partial","partialState","call","createInstance","computedProps","componentDidCatch","getDerivedStateFromError","getDerivedStateFromProps","componentWillMount","UNSAFE_componentWillMount","child","childContextTypes","getChildContext","childContext","componentWillUnmount","_err","elt","clientRefVisitor","React","values","flat","Infinity","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentDispatcher","SHOULD_YIELD","setImmediate","YIELD_AFTER_MS","mountClientReference","mountClassComponent","mountFunctionComponent","visitElement","fragmentElement","providerElement","_context","consumerElement","lazyElement","mountLazyComponent","memoElement","refElement","el","userElement","visitLoop","traversalChildren","traversalMap","traversalStore","traversalErrorFrame","prevDispatcher","start","Date","now","shift","pop","unshift","makeYieldFrame","visit","hasYielded","updateClassComponent","updateFunctionComponent","updateLazyComponent","updateClientReference","flushFrames","defaultVisitor","runningPrepassCount","globalThis","__ssrPrepassEnv","renderPrepass","finally"],"mappings":"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"}