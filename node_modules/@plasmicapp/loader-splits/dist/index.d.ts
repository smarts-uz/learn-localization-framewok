import type { Split } from '@plasmicapp/loader-fetcher';

/**
 * Gets a more human-readable description of the variation
 */
export declare function describeVariation(splits: Split[], variation: Record<string, string>): Record<string, PickedVariationDescription>;

export declare function describeVariationForKey(splits: Split[], key: string, value: string): PickedVariationDescription;

declare interface ExternalIDsFilters {
    projectIds?: string[];
    customFilter?: (split: Split) => boolean;
}

export declare function getActiveVariation(opts: {
    splits: Split[];
    traits: Record<string, string | number | boolean>;
    getKnownValue?: (key: string) => string | undefined;
    updateKnownValue?: (key: string, value: string) => void;
    getRandomValue?: (key: string) => number;
    enableUnseededExperiments?: boolean;
    useSeedBucketing?: boolean;
    seedRange?: number;
}): Record<string, string>;

export declare function getExternalIds(splits: Split[], variation: Record<string, string>, filters?: ExternalIDsFilters): Record<string, string>;

export declare const getSeededRandomFunction: (strSeed: string) => () => number;

export declare const getSplitKey: (split: Split) => string;

export declare interface PickedVariationDescription {
    name: string;
    description?: string;
    pagesPaths: string[];
    type: "original" | "override";
    chosenValue: string;
    externalIdGroup?: string;
    externalIdValue?: string;
}

export { }
