"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  describeVariation: () => describeVariation,
  describeVariationForKey: () => describeVariationForKey,
  getActiveVariation: () => getActiveVariation,
  getExternalIds: () => getExternalIds,
  getSeededRandomFunction: () => getSeededRandomFunction,
  getSplitKey: () => getSplitKey
});
module.exports = __toCommonJS(src_exports);

// src/random.ts
var getSeededRandomFunction = (strSeed) => {
  function cyrb128(str) {
    let h1 = 1779033703, h2 = 3144134277, h3 = 1013904242, h4 = 2773480762;
    for (let i = 0, k; i < str.length; i++) {
      k = str.charCodeAt(i);
      h1 = h2 ^ Math.imul(h1 ^ k, 597399067);
      h2 = h3 ^ Math.imul(h2 ^ k, 2869860233);
      h3 = h4 ^ Math.imul(h3 ^ k, 951274213);
      h4 = h1 ^ Math.imul(h4 ^ k, 2716044179);
    }
    h1 = Math.imul(h3 ^ h1 >>> 18, 597399067);
    h2 = Math.imul(h4 ^ h2 >>> 22, 2869860233);
    h3 = Math.imul(h1 ^ h3 >>> 17, 951274213);
    h4 = Math.imul(h2 ^ h4 >>> 19, 2716044179);
    return [
      (h1 ^ h2 ^ h3 ^ h4) >>> 0,
      (h2 ^ h1) >>> 0,
      (h3 ^ h1) >>> 0,
      (h4 ^ h1) >>> 0
    ];
  }
  function sfc32(a, b, c, d) {
    return function() {
      a >>>= 0;
      b >>>= 0;
      c >>>= 0;
      d >>>= 0;
      let t = a + b | 0;
      a = b ^ b >>> 9;
      b = c + (c << 3) | 0;
      c = c << 21 | c >>> 11;
      d = d + 1 | 0;
      t = t + d | 0;
      c = c + t | 0;
      return (t >>> 0) / 4294967296;
    };
  }
  const seed = cyrb128(strSeed);
  const rand = sfc32(seed[0], seed[1], seed[2], seed[3]);
  return rand;
};

// src/variation.ts
var import_json_logic_js = __toESM(require("json-logic-js"));
var isBrowser = typeof window !== "undefined" && window != null && typeof window.document !== "undefined";
var PLASMIC_SEED = "plasmic_seed";
var BUILTIN_TRAITS_UNKNOWN = {
  pageUrl: "unknown"
};
var getBrowserBuiltinTraits = () => {
  if (!isBrowser) {
    return {};
  }
  return {
    pageUrl: document.location.href
  };
};
var getSplitKey = (split) => {
  return `${split.type === "experiment" ? "exp." : "seg."}${split.id}`;
};
function getActiveVariation(opts) {
  const { splits, getKnownValue, updateKnownValue } = opts;
  const getRandomValue = (key) => {
    var _a;
    if (opts.getRandomValue) {
      return opts.getRandomValue(key);
    }
    if (opts.traits[PLASMIC_SEED]) {
      const rand = getSeededRandomFunction(
        ((_a = opts.traits[PLASMIC_SEED]) != null ? _a : "") + key
      );
      return rand();
    }
    if (!opts.enableUnseededExperiments) {
      return 0;
    }
    return Math.random();
  };
  const variation = {};
  splits.forEach((split) => {
    var _a;
    const key = getSplitKey(split);
    const knownVal = getKnownValue == null ? void 0 : getKnownValue(key);
    if (knownVal) {
      variation[key] = knownVal;
      return;
    }
    const numSlices = split.slices.length;
    let chosenSlice = void 0;
    if (split.type === "experiment") {
      if (opts.useSeedBucketing) {
        const seed = opts.traits[PLASMIC_SEED];
        const buckets = [];
        const totalBuckets = (_a = opts.seedRange) != null ? _a : 1;
        let avaiableBuckets = totalBuckets;
        for (let i = 0; i < numSlices; i++) {
          const slice = split.slices[i];
          const numBuckets = Math.min(
            Math.floor(slice.prob * totalBuckets),
            avaiableBuckets
          );
          for (let j = 0; j < numBuckets; j++) {
            buckets.push(slice.id);
          }
          avaiableBuckets -= numBuckets;
        }
        if (buckets.length > 0) {
          const shuffleRand = getSeededRandomFunction(split.id);
          for (let i = 0; i < buckets.length; i++) {
            const j = Math.floor(shuffleRand() * (i + 1));
            [buckets[i], buckets[j]] = [buckets[j], buckets[i]];
          }
          const sliceIdx = +(seed != null ? seed : "0") % buckets.length;
          chosenSlice = split.slices.find((s) => s.id === buckets[sliceIdx]);
        } else {
          chosenSlice = split.slices[numSlices - 1];
        }
      } else {
        let p = getRandomValue(split.id);
        chosenSlice = split.slices[numSlices - 1];
        for (let i = 0; i < numSlices; i++) {
          if (p - split.slices[i].prob <= 0) {
            chosenSlice = split.slices[i];
            break;
          }
          p -= split.slices[i].prob;
        }
      }
    } else if (split.type === "segment") {
      for (let i = 0; i < numSlices; i++) {
        if (import_json_logic_js.default.apply(split.slices[i].cond, __spreadValues(__spreadValues(__spreadValues({
          time: (/* @__PURE__ */ new Date()).toISOString()
        }, BUILTIN_TRAITS_UNKNOWN), getBrowserBuiltinTraits()), opts.traits))) {
          chosenSlice = split.slices[i];
        }
      }
    }
    if (chosenSlice) {
      variation[key] = chosenSlice.id;
      if (split.externalId && chosenSlice.externalId) {
        variation[`ext.${split.externalId}`] = chosenSlice.externalId;
      }
      if (split.type === "experiment") {
        updateKnownValue == null ? void 0 : updateKnownValue(key, chosenSlice.id);
      }
    }
  });
  return variation;
}
function getExternalIds(splits, variation, filters) {
  const externalVariation = {};
  function shouldIncludeSplit(split) {
    if (!filters) {
      return true;
    }
    if (filters.projectIds && !filters.projectIds.includes(split.projectId)) {
      return false;
    }
    if (filters.customFilter && !filters.customFilter(split)) {
      return false;
    }
    return true;
  }
  Object.keys(variation).forEach((variationKey) => {
    const [, splitId] = variationKey.split(".");
    const sliceId = variation[variationKey];
    const split = splits.find(
      (s) => s.id === splitId || s.externalId === splitId
    );
    if (split && split.externalId && shouldIncludeSplit(split)) {
      const slice = split.slices.find((s) => s.id === sliceId || s.externalId === sliceId);
      if (slice == null ? void 0 : slice.externalId) {
        externalVariation[`${split.externalId}`] = slice.externalId;
      }
    }
  });
  return externalVariation;
}
function describeVariationForKey(splits, key, value) {
  const [, splitId] = key.split(".");
  const split = splits.find(
    (s) => s.id === splitId || s.externalId === splitId
  );
  if (!split) {
    throw new Error(`Split not found for key "${key}"`);
  }
  const sliceIndex = split.slices.findIndex(
    (s) => s.id === value || s.externalId === value
  );
  if (sliceIndex === -1) {
    throw new Error(`Invalid split value "${value}" for key "${key}"`);
  }
  return {
    name: split.name,
    description: split.description,
    pagesPaths: split.pagesPaths,
    type: sliceIndex === 0 ? "original" : "override",
    chosenValue: value,
    externalIdGroup: split.externalId,
    externalIdValue: sliceIndex >= 0 && split.slices[sliceIndex].externalId ? split.slices[sliceIndex].externalId : void 0
  };
}
function describeVariation(splits, variation) {
  return Object.fromEntries(
    Object.entries(variation).map(([key, value]) => {
      return [key, describeVariationForKey(splits, key, value)];
    })
  );
}
//# sourceMappingURL=index.js.map
