{
  "version": 3,
  "sources": ["../src/api.ts"],
  "sourcesContent": ["import fetch from \"@plasmicapp/isomorphic-unfetch\";\n\nconst PLASMIC_HOST = \"https://data.plasmic.app\";\n\nexport interface PlasmicUser {\n  email: string;\n  properties: Record<string, unknown> | null;\n  roleId: string;\n  roleName: string;\n  roleIds: string[];\n  roleNames: string[];\n}\n\nexport type PlasmicUserResult =\n  | {\n      user: null;\n      token: null;\n      error: Error;\n    }\n  | {\n      user: PlasmicUser;\n      token: string;\n      error?: never;\n    };\n\nexport async function getPlasmicAppUserFromToken(opts: {\n  host?: string;\n  token: string;\n}): Promise<PlasmicUserResult> {\n  const { host, token } = opts;\n  const url = `${host || PLASMIC_HOST}/api/v1/app-auth/userinfo`;\n  const result = await fetch(url, {\n    headers: {\n      \"x-plasmic-data-user-auth-token\": token,\n    },\n  });\n\n  const user = await result.json();\n\n  if (result.status >= 400) {\n    return {\n      user: null,\n      token: null,\n      error: new Error(\"Invalid token\"),\n    };\n  }\n\n  return {\n    user,\n    token,\n  };\n}\n\nexport async function getPlasmicAppUser(opts: {\n  host?: string;\n  appId: string;\n  codeVerifier: string;\n  code: string;\n}): Promise<PlasmicUserResult> {\n  const { host, appId, codeVerifier, code } = opts;\n\n  const requestParams = new URLSearchParams();\n  requestParams.set(\"grant_type\", \"authorization_code\");\n  requestParams.set(\"code\", code);\n  requestParams.set(\"code_verifier\", codeVerifier);\n  requestParams.set(\"client_id\", appId);\n\n  const url = `${\n    host || PLASMIC_HOST\n  }/api/v1/app-auth/token?${requestParams.toString()}`;\n  const result = await fetch(url);\n\n  const { token, user, error } = await result.json();\n\n  if (result.status >= 400 || error) {\n    return {\n      user: null,\n      token: null,\n      error: error ?? new Error(\"Internal error\"),\n    };\n  }\n\n  return {\n    user,\n    token,\n  };\n}\n\ntype UserIdentifier = { email: string } | { externalId: string };\n\nexport async function ensurePlasmicAppUser(\n  opts: {\n    host?: string;\n    appSecret: string;\n    roleId?: string;\n  } & UserIdentifier\n): Promise<PlasmicUserResult> {\n  const { host, appSecret, roleId } = opts;\n\n  const email = \"email\" in opts ? opts.email : undefined;\n  const externalId = \"externalId\" in opts ? opts.externalId : undefined;\n\n  const url = `${host || PLASMIC_HOST}/api/v1/app-auth/user`;\n  const result = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-plasmic-app-auth-api-token\": appSecret,\n    },\n    body: JSON.stringify({\n      email,\n      externalId,\n      roleId,\n    }),\n  });\n\n  const { user, token, error } = await result.json();\n\n  if (result.status >= 400 || error) {\n    return {\n      user: null,\n      token: null,\n      error: error ?? new Error(\"Internal error\"),\n    };\n  }\n\n  return {\n    user,\n    token,\n  };\n}\n\nexport const createPlasmicAppUser = ensurePlasmicAppUser;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,WAAW;AAElB,IAAM,eAAe;AAuBrB,SAAsB,2BAA2B,MAGlB;AAAA;AAC7B,UAAM,EAAE,MAAM,MAAM,IAAI;AACxB,UAAM,MAAM,GAAG,QAAQ;AACvB,UAAM,SAAS,MAAM,MAAM,KAAK;AAAA,MAC9B,SAAS;AAAA,QACP,kCAAkC;AAAA,MACpC;AAAA,IACF,CAAC;AAED,UAAM,OAAO,MAAM,OAAO,KAAK;AAE/B,QAAI,OAAO,UAAU,KAAK;AACxB,aAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OAAO,IAAI,MAAM,eAAe;AAAA,MAClC;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAEA,SAAsB,kBAAkB,MAKT;AAAA;AAC7B,UAAM,EAAE,MAAM,OAAO,cAAc,KAAK,IAAI;AAE5C,UAAM,gBAAgB,IAAI,gBAAgB;AAC1C,kBAAc,IAAI,cAAc,oBAAoB;AACpD,kBAAc,IAAI,QAAQ,IAAI;AAC9B,kBAAc,IAAI,iBAAiB,YAAY;AAC/C,kBAAc,IAAI,aAAa,KAAK;AAEpC,UAAM,MAAM,GACV,QAAQ,sCACgB,cAAc,SAAS;AACjD,UAAM,SAAS,MAAM,MAAM,GAAG;AAE9B,UAAM,EAAE,OAAO,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAEjD,QAAI,OAAO,UAAU,OAAO,OAAO;AACjC,aAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OAAO,wBAAS,IAAI,MAAM,gBAAgB;AAAA,MAC5C;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAIA,SAAsB,qBACpB,MAK4B;AAAA;AAC5B,UAAM,EAAE,MAAM,WAAW,OAAO,IAAI;AAEpC,UAAM,QAAQ,WAAW,OAAO,KAAK,QAAQ;AAC7C,UAAM,aAAa,gBAAgB,OAAO,KAAK,aAAa;AAE5D,UAAM,MAAM,GAAG,QAAQ;AACvB,UAAM,SAAS,MAAM,MAAM,KAAK;AAAA,MAC9B,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,gCAAgC;AAAA,MAClC;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,EAAE,MAAM,OAAO,MAAM,IAAI,MAAM,OAAO,KAAK;AAEjD,QAAI,OAAO,UAAU,OAAO,OAAO;AACjC,aAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OAAO,wBAAS,IAAI,MAAM,gBAAgB;AAAA,MAC5C;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAEO,IAAM,uBAAuB;",
  "names": []
}
