"use client";
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ExtractPlasmicQueryData: () => ExtractPlasmicQueryData
});
module.exports = __toCommonJS(src_exports);

// src/ExtractPlasmicQueryData.tsx
var import_prepass = require("@plasmicapp/prepass");
var React = __toESM(require("react"));
function ExtractPlasmicQueryData(props) {
  const { children } = props;
  if (!("useId" in React) || !("use" in React)) {
    throw new Error(
      `You can only use <ExtractPlasmicQueryData /> from server components.`
    );
  }
  const scriptId = `plasmic-prefetch-${React["useId"]()}`;
  if (typeof window === "undefined") {
    const {
      queryData,
      headMetadata
    } = React["use"]((0, import_prepass.plasmicPrepassExtract)(/* @__PURE__ */ React.createElement(React.Fragment, null, children)));
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      "script",
      {
        type: "application/json",
        dangerouslySetInnerHTML: { __html: JSON.stringify(queryData) },
        "data-plasmic-prefetch-id": scriptId,
        suppressHydrationWarning: true
      }
    ), headMetadata && /* @__PURE__ */ React.createElement(
      "script",
      {
        type: "application/json",
        dangerouslySetInnerHTML: {
          __html: JSON.stringify(headMetadata)
        },
        "data-plasmic-head-metadata-id": scriptId,
        suppressHydrationWarning: true
      }
    ));
  } else {
    return null;
  }
}
//# sourceMappingURL=index.js.map
