"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/react-server.ts
var react_server_exports = {};
__export(react_server_exports, {
  fetchExtractedHeadMetadata: () => fetchExtractedHeadMetadata,
  fetchExtractedQueryData: () => fetchExtractedQueryData,
  withPlasmicMetadata: () => withPlasmicMetadata
});
module.exports = __toCommonJS(react_server_exports);

// src/extracted-data-fetcher.ts
var import_node_html_parser = require("node-html-parser");
function fetchExtractedQueryData(url) {
  return __async(this, null, function* () {
    const res = yield fetch(url);
    if (res.status !== 200) {
      return void 0;
    }
    const html = yield res.text();
    const root = (0, import_node_html_parser.parse)(html);
    const script = root.querySelector("script[data-plasmic-prefetch-id]");
    if (script) {
      return JSON.parse(script.innerHTML);
    }
    return void 0;
  });
}
function fetchExtractedHeadMetadata(url) {
  return __async(this, null, function* () {
    const res = yield fetch(url);
    if (res.status !== 200) {
      return void 0;
    }
    const html = yield res.text();
    const root = (0, import_node_html_parser.parse)(html);
    const script = root.querySelector("script[data-plasmic-head-metadata-id]");
    if (script) {
      return JSON.parse(script.innerHTML);
    }
    return void 0;
  });
}
function withPlasmicMetadata(_0) {
  return __async(this, arguments, function* ({
    pathname,
    searchParams
  }) {
    var _a, _b, _c;
    const isPlasmicSsr = !!(searchParams == null ? void 0 : searchParams["plasmicSsr"]) && (searchParams == null ? void 0 : searchParams["plasmicSsr"]) !== "false";
    if (isPlasmicSsr) {
      return {};
    }
    const prepassHost = (_c = (_a = process.env.PLASMIC_PREPASS_HOST) != null ? _a : process.env.VERCEL_URL && `https://${process.env.VERCEL_URL}`) != null ? _c : `http://localhost:${(_b = process.env.PORT) != null ? _b : 3e3}`;
    const newSearchParams = new URLSearchParams(
      Object.entries(searchParams != null ? searchParams : {}).flatMap(
        ([key, values]) => Array.isArray(values) ? values.map((v) => [key, v]) : [[key, values]]
      )
    );
    newSearchParams.set("plasmicSsr", "true");
    if (process.env.VERCEL_AUTOMATION_BYPASS_SECRET) {
      newSearchParams.set(
        "x-vercel-protection-bypass",
        process.env.VERCEL_AUTOMATION_BYPASS_SECRET
      );
    }
    const prefetchedHeadMetadata = yield fetchExtractedHeadMetadata(
      `${prepassHost}${pathname}?${newSearchParams.toString()}`
    );
    const headMetadata = {};
    if (prefetchedHeadMetadata && Object.keys(prefetchedHeadMetadata).length > 0) {
      if (prefetchedHeadMetadata.image) {
        headMetadata.twitter = {
          card: "summary_large_image",
          images: [prefetchedHeadMetadata.image]
        };
        headMetadata.openGraph = {
          images: [prefetchedHeadMetadata.image]
        };
      } else {
        headMetadata.twitter = {
          card: "summary"
        };
        headMetadata.openGraph = {};
      }
      if (prefetchedHeadMetadata.title) {
        headMetadata.title = prefetchedHeadMetadata.title;
        headMetadata.twitter.title = prefetchedHeadMetadata.title;
        headMetadata.openGraph.title = prefetchedHeadMetadata.title;
      }
      if (prefetchedHeadMetadata.description) {
        headMetadata.description = prefetchedHeadMetadata.description;
        headMetadata.twitter.description = prefetchedHeadMetadata.description;
        headMetadata.openGraph.description = prefetchedHeadMetadata.description;
      }
      if (prefetchedHeadMetadata.canonical) {
        headMetadata.alternates = {
          canonical: prefetchedHeadMetadata.canonical
        };
      }
    }
    return headMetadata;
  });
}
//# sourceMappingURL=react-server.js.map
