{
  "version": 3,
  "sources": ["../src/index.ts", "../src/ExtractPlasmicQueryData.tsx"],
  "sourcesContent": ["export * from \"./ExtractPlasmicQueryData\";\n", "import { plasmicPrepassExtract } from \"@plasmicapp/prepass\";\nimport type { HeadMetadata } from \"@plasmicapp/query\";\nimport * as React from \"react\";\n\n/**\n * EXPERIMENTAL\n *\n * A component that serves the same purpose as extractPlasmicQueryData(), but from\n * React server components. This only works from frameworks that support\n * React.useId() and React.use() (like Next.js 13).\n *\n * The children of this component will be run through `extractPlasmicQueryData()`.\n */\nexport function ExtractPlasmicQueryData(props: { children?: React.ReactNode }) {\n  const { children } = props;\n  if (!(\"useId\" in React) || !(\"use\" in React)) {\n    throw new Error(\n      `You can only use <ExtractPlasmicQueryData /> from server components.`\n    );\n  }\n  const scriptId = `plasmic-prefetch-${(React as any)[\"\" + \"useId\"]()}`;\n  if (typeof window === \"undefined\") {\n    const {\n      queryData,\n      headMetadata,\n    }: { queryData: Record<string, any>; headMetadata: HeadMetadata } = (\n      React as any\n    )[\"\" + \"use\"](plasmicPrepassExtract(<>{children}</>));\n    return (\n      <>\n        <script\n          type=\"application/json\"\n          dangerouslySetInnerHTML={{ __html: JSON.stringify(queryData) }}\n          data-plasmic-prefetch-id={scriptId}\n          suppressHydrationWarning={true}\n        />\n        {headMetadata && (\n          <script\n            type=\"application/json\"\n            dangerouslySetInnerHTML={{\n              __html: JSON.stringify(headMetadata),\n            }}\n            data-plasmic-head-metadata-id={scriptId}\n            suppressHydrationWarning={true}\n          />\n        )}\n      </>\n    );\n  } else {\n    return null;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,qBAAsC;AAEtC,YAAuB;AAWhB,SAAS,wBAAwB,OAAuC;AAC7E,QAAM,EAAE,SAAS,IAAI;AACrB,MAAI,EAAE,WAAW,UAAU,EAAE,SAAS,QAAQ;AAC5C,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,QAAM,WAAW,oBAAmC,eAAc;AAClE,MAAI,OAAO,WAAW,aAAa;AACjC,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAEE,iBAAY,sCAAsB,0DAAG,QAAS,CAAG,CAAC;AACpD,WACE,0DACE;AAAA,MAAC;AAAA;AAAA,QACC,MAAK;AAAA,QACL,yBAAyB,EAAE,QAAQ,KAAK,UAAU,SAAS,EAAE;AAAA,QAC7D,4BAA0B;AAAA,QAC1B,0BAA0B;AAAA;AAAA,IAC5B,GACC,gBACC;AAAA,MAAC;AAAA;AAAA,QACC,MAAK;AAAA,QACL,yBAAyB;AAAA,UACvB,QAAQ,KAAK,UAAU,YAAY;AAAA,QACrC;AAAA,QACA,iCAA+B;AAAA,QAC/B,0BAA0B;AAAA;AAAA,IAC5B,CAEJ;AAAA,EAEJ,OAAO;AACL,WAAO;AAAA,EACT;AACF;",
  "names": []
}
