{"version":3,"file":"index.esm.js","sources":["../../src/registerToken.ts"],"sourcesContent":["export type TokenType =\n  | \"color\"\n  | \"spacing\"\n  | \"font-family\"\n  | \"font-size\"\n  | \"line-height\"\n  | \"opacity\";\n\nexport interface TokenRegistration {\n  /**\n   * Name for this token; should be stable across updates\n   */\n  name: string;\n  /**\n   * Value for the token, which can either be a valid css value or a css reference\n   * to a css variable provided by your host app, like `var(--my-token)`\n   */\n  value: string;\n  /**\n   * Type of token\n   */\n  type: TokenType;\n  /**\n   * Optional display name to use for this token, if you'd like to use a friendlier\n   * name to display to Studio users\n   */\n  displayName?: string;\n  /**\n   * By default, if this token is a css variable reference like `var(--my-token)`,\n   * then it is assumed that `--my-token` is defined on `:root`.  If it is defined\n   * in another element, then you can pass in a selector for that element,\n   * like `.themeRoot`.\n   */\n  selector?: string;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicTokenRegistry: TokenRegistration[];\n  }\n}\n\nconst root = globalThis as any;\n\nif (root.__PlasmicTokenRegistry == null) {\n  root.__PlasmicTokenRegistry = [];\n}\n\nexport default function registerToken(token: TokenRegistration) {\n  root.__PlasmicTokenRegistry.push(token);\n}\n"],"names":[],"mappings":"AA0CA,IAAM,IAAI,GAAG,UAAiB,CAAC;AAE/B,IAAI,IAAI,CAAC,sBAAsB,IAAI,IAAI,EAAE;AACvC,IAAA,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;AAClC,CAAA;AAEuB,SAAA,aAAa,CAAC,KAAwB,EAAA;AAC5D,IAAA,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1C;;;;"}