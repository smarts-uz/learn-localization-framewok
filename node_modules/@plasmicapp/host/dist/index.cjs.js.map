{"version":3,"file":"index.cjs.js","sources":["../src/lang-utils.ts","../src/useForceUpdate.ts","../src/canvas-host.tsx","../src/common.ts","../src/data.tsx","../src/fetcher.ts","../src/global-actions.tsx","../src/link.tsx","../src/registerComponent.ts","../src/registerFunction.ts","../src/registerGlobalContext.ts","../src/registerToken.ts","../src/registerTrait.ts","../src/repeatedElement.ts","../src/version.ts","../src/index.ts"],"sourcesContent":["function isString(x: any): x is string {\n  return typeof x === \"string\";\n}\n\ntype StringGen = string | (() => string);\n\nexport function ensure<T>(x: T | null | undefined, msg: StringGen = \"\"): T {\n  if (x === null || x === undefined) {\n    debugger;\n    msg = (isString(msg) ? msg : msg()) || \"\";\n    throw new Error(\n      `Value must not be undefined or null${msg ? `- ${msg}` : \"\"}`\n    );\n  } else {\n    return x;\n  }\n}\n","import { useCallback, useState } from \"react\";\n\nexport default function useForceUpdate() {\n  const [, setTick] = useState(0);\n  const update = useCallback(() => {\n    setTick((tick) => tick + 1);\n  }, []);\n  return update;\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { ensure } from \"./lang-utils\";\nimport useForceUpdate from \"./useForceUpdate\";\n\ndeclare global {\n  interface Window {\n    __PlasmicHostVersion: string;\n  }\n}\n\nif ((globalThis as any).__PlasmicHostVersion == null) {\n  (globalThis as any).__PlasmicHostVersion = \"3\";\n}\n\nconst rootChangeListeners: (() => void)[] = [];\nclass PlasmicRootNodeWrapper {\n  constructor(private value: null | React.ReactElement) {}\n  set = (val: null | React.ReactElement) => {\n    this.value = val;\n    rootChangeListeners.forEach((f) => f());\n  };\n  get = () => this.value;\n}\n\nconst plasmicRootNode = new PlasmicRootNodeWrapper(null);\n\nfunction getHashParams() {\n  return new URLSearchParams(location.hash.replace(/^#/, \"?\"));\n}\n\nfunction getPlasmicOrigin() {\n  const params = getHashParams();\n  return ensure(\n    params.get(\"origin\"),\n    \"Missing information from Plasmic window.\"\n  );\n}\n\nfunction getStudioHash() {\n  const hashParams = getHashParams();\n  if (hashParams.has(\"studioHash\")) {\n    return hashParams.get(\"studioHash\");\n  }\n  const urlParams = new URL(location.href).searchParams;\n  return urlParams.get(\"studio-hash\");\n}\n\nfunction renderStudioIntoIframe() {\n  const script = document.createElement(\"script\");\n  const plasmicOrigin = getPlasmicOrigin();\n  const hash = getStudioHash();\n  script.src = `${plasmicOrigin}/static/js/studio${\n    hash ? `.${hash}.js` : `.js`\n  }`;\n  document.body.appendChild(script);\n}\n\nlet renderCount = 0;\nexport function setPlasmicRootNode(node: React.ReactElement | null) {\n  // Keep track of renderCount, which we use as key to ErrorBoundary, so\n  // we can reset the error on each render\n  renderCount++;\n  plasmicRootNode.set(node);\n}\n\nexport interface PlasmicCanvasContextValue {\n  componentName: string | null;\n  globalVariants: Record<string, string>;\n  interactive?: boolean;\n}\n\n/**\n * React context to detect whether the component is rendered on Plasmic editor.\n * If not, return false.\n * If so, return an object with more information about the component\n */\nexport const PlasmicCanvasContext = React.createContext<\n  PlasmicCanvasContextValue | false\n>(false);\nexport const usePlasmicCanvasContext = () =>\n  React.useContext(PlasmicCanvasContext);\n\nfunction _PlasmicCanvasHost() {\n  // If window.parent is null, then this is a window whose containing iframe\n  // has been detached from the DOM (for the top window, window.parent === window).\n  // In that case, we shouldn't do anything.  If window.parent is null, by the way,\n  // location.hash will also be null.\n  const isFrameAttached = !!window.parent;\n  const isCanvas = !!location.hash?.match(/\\bcanvas=true\\b/);\n  const isLive = !!location.hash?.match(/\\blive=true\\b/) || !isFrameAttached;\n  const shouldRenderStudio =\n    isFrameAttached &&\n    !document.querySelector(\"#plasmic-studio-tag\") &&\n    !isCanvas &&\n    !isLive;\n  const forceUpdate = useForceUpdate();\n  React.useLayoutEffect(() => {\n    rootChangeListeners.push(forceUpdate);\n    return () => {\n      const index = rootChangeListeners.indexOf(forceUpdate);\n      if (index >= 0) {\n        rootChangeListeners.splice(index, 1);\n      }\n    };\n  }, [forceUpdate]);\n  React.useEffect(() => {\n    if (shouldRenderStudio && isFrameAttached && window.parent !== window) {\n      renderStudioIntoIframe();\n    }\n  }, [shouldRenderStudio, isFrameAttached]);\n  React.useEffect(() => {\n    if (!shouldRenderStudio && !document.querySelector(\"#getlibs\") && isLive) {\n      const scriptElt = document.createElement(\"script\");\n      scriptElt.id = \"getlibs\";\n      scriptElt.src = getPlasmicOrigin() + \"/static/js/getlibs.js\";\n      scriptElt.async = false;\n      scriptElt.onload = () => {\n        (window as any).__GetlibsReadyResolver?.();\n      };\n      document.head.append(scriptElt);\n    }\n  }, [shouldRenderStudio]);\n\n  const [canvasContextValue, setCanvasContextValue] = React.useState(() =>\n    deriveCanvasContextValue()\n  );\n\n  React.useEffect(() => {\n    if (isCanvas) {\n      const listener = () => {\n        setCanvasContextValue(deriveCanvasContextValue());\n      };\n      window.addEventListener(\"hashchange\", listener);\n      return () => window.removeEventListener(\"hashchange\", listener);\n    }\n    return undefined;\n  }, [isCanvas]);\n  if (!isFrameAttached) {\n    return null;\n  }\n  if (isCanvas || isLive) {\n    let appDiv = document.querySelector(\"#plasmic-app.__wab_user-body\");\n    if (!appDiv) {\n      appDiv = document.createElement(\"div\");\n      appDiv.id = \"plasmic-app\";\n      appDiv.classList.add(\"__wab_user-body\");\n      document.body.prepend(appDiv);\n    }\n    return ReactDOM.createPortal(\n      <ErrorBoundary key={`${renderCount}`}>\n        <PlasmicCanvasContext.Provider value={canvasContextValue}>\n          {plasmicRootNode.get()}\n        </PlasmicCanvasContext.Provider>\n      </ErrorBoundary>,\n      appDiv,\n      \"plasmic-app\"\n    );\n  }\n  if (shouldRenderStudio && window.parent === window) {\n    return (\n      <iframe\n        src={`https://docs.plasmic.app/app-content/app-host-ready#appHostUrl=${encodeURIComponent(\n          location.href\n        )}`}\n        style={{\n          width: \"100vw\",\n          height: \"100vh\",\n          border: \"none\",\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          zIndex: 99999999,\n        }}\n      ></iframe>\n    );\n  }\n  return null;\n}\n\ninterface PlasmicCanvasHostProps {\n  /**\n   * Webpack hmr uses EventSource to\tlisten to hot reloads, but that\n   * resultsin a persistent\tconnection from\teach window.  In Plasmic\n   * Studio, if a project is configured to use app-hosting with a\n   * nextjs or gatsby server running in dev mode, each artboard will\n   * be holding a persistent connection to the dev server.\n   * Because browsers\thave a limit to\thow many connections can\n   * be held\tat a time by domain, this means\tafter X\tartboards, new\n   * artboards will freeze and not load.\n   *\n   * By default, <PlasmicCanvasHost /> will globally mutate\n   * window.EventSource to avoid using EventSource for HMR, which you\n   * typically don't need for your custom host page.  If you do still\n   * want to retain HRM, then youc an pass enableWebpackHmr={true}.\n   */\n  enableWebpackHmr?: boolean;\n}\n\nexport const PlasmicCanvasHost: React.FunctionComponent<\n  PlasmicCanvasHostProps\n> = (props) => {\n  const { enableWebpackHmr } = props;\n  const [node, setNode] = React.useState<React.ReactElement<any, any> | null>(\n    null\n  );\n  React.useEffect(() => {\n    setNode(<_PlasmicCanvasHost />);\n  }, []);\n  return (\n    <>\n      {!enableWebpackHmr && <DisableWebpackHmr />}\n      {node}\n    </>\n  );\n};\n\ntype RenderErrorListener = (err: Error) => void;\nconst renderErrorListeners: RenderErrorListener[] = [];\nexport function registerRenderErrorListener(listener: RenderErrorListener) {\n  renderErrorListeners.push(listener);\n  return () => {\n    const index = renderErrorListeners.indexOf(listener);\n    if (index >= 0) {\n      renderErrorListeners.splice(index, 1);\n    }\n  };\n}\n\ninterface ErrorBoundaryProps {\n  children?: React.ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  error?: Error;\n}\n\nclass ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {};\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { error };\n  }\n\n  componentDidCatch(error: Error) {\n    renderErrorListeners.forEach((listener) => listener(error));\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>Error: {`${this.state.error.message}`}</div>;\n    } else {\n      return <>{this.props.children}</>;\n    }\n  }\n}\n\nfunction DisableWebpackHmr() {\n  if (process.env.NODE_ENV === \"production\") {\n    return null;\n  }\n  return (\n    <script\n      type=\"text/javascript\"\n      dangerouslySetInnerHTML={{\n        __html: `\n      if (typeof window !== \"undefined\") {\n        const RealEventSource = window.EventSource;\n        window.EventSource = function(url, config) {\n          if (/[^a-zA-Z]hmr($|[^a-zA-Z])/.test(url)) {\n            console.warn(\"Plasmic: disabled EventSource request for\", url);\n            return {\n              onerror() {}, onmessage() {}, onopen() {}, close() {}\n            };\n          } else {\n            return new RealEventSource(url, config);\n          }\n        }\n      }\n      `,\n      }}\n    ></script>\n  );\n}\n\nfunction deriveCanvasContextValue(): PlasmicCanvasContextValue | false {\n  const hash = window.location.hash;\n  if (hash && hash.length > 0) {\n    // create URLsearchParams skipping the initial # character\n    const params = new URLSearchParams(hash.substring(1));\n    if (params.get(\"canvas\") === \"true\") {\n      const globalVariants = params.get(\"globalVariants\");\n      return {\n        componentName: params.get(\"componentName\") ?? null,\n        globalVariants: globalVariants ? JSON.parse(globalVariants) : {},\n        interactive: params.get(\"interactive\") === \"true\",\n      };\n    }\n  }\n  return false;\n}\n\ninterface PlasmicCanvasCodeComponentContextValue {\n  // An internal Plasmic ID for an instance of a code component\n  id: string;\n\n  // Whether this code component or some descendant of it is currently selected in Plasmic Studio\n  isSelected: boolean;\n\n  // If some descendant of this code component is selected, the name of the selected descendant\n  // slot ancestor.  Otherwise, null. For example, considering a modal with two slots (\"header\" and \"body\")\n  // if an element inside the \"header\" slot is selected, this value would be \"header\".\n  selectedSlotName: string | null;\n}\n\nexport const PlasmicCanvasCodeComponentContext =\n  React.createContext<PlasmicCanvasCodeComponentContextValue | null>(null);\n\nexport const usePlasmicCanvasCodeComponentContext = () => {\n  return React.useContext(PlasmicCanvasCodeComponentContext);\n};\n","export const tuple = <T extends any[]>(...args: T): T => args;\n","import React, {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useContext,\n} from \"react\";\nimport { tuple } from \"./common\";\n\nexport type DataDict = Record<string, any>;\n\nexport const DataContext = createContext<DataDict | undefined>(undefined);\n\nexport type DataMeta = {\n  advanced?: boolean;\n  hidden?: boolean;\n  label?: string;\n};\n\nexport function mkMetaName(name: string) {\n  return `__plasmic_meta_${name}`;\n}\n\nexport function mkMetaValue(meta: Partial<DataMeta>): DataMeta {\n  return meta;\n}\n\nexport function applySelector(\n  rawData: DataDict | undefined,\n  selector: string | undefined\n): any {\n  if (!selector) {\n    return undefined;\n  }\n  let curData = rawData;\n  for (const key of selector.split(\".\")) {\n    curData = curData?.[key];\n  }\n  return curData;\n}\n\nexport type SelectorDict = Record<string, string | undefined>;\n\nexport function useSelector(selector: string | undefined): any {\n  const rawData = useDataEnv();\n  return applySelector(rawData, selector);\n}\n\nexport function useSelectors(selectors: SelectorDict = {}): any {\n  const rawData = useDataEnv();\n  return Object.fromEntries(\n    Object.entries(selectors)\n      .filter(([key, selector]) => !!key && !!selector)\n      .map(([key, selector]) => tuple(key, applySelector(rawData, selector)))\n  );\n}\n\nexport function useDataEnv() {\n  return useContext(DataContext);\n}\n\nexport interface DataProviderProps {\n  /**\n   * Key to set in data context.\n   */\n  name?: string;\n  /**\n   * Value to set for `name` in data context.\n   */\n  data?: any;\n  /**\n   * If true, hide this item in studio data picker.\n   */\n  hidden?: boolean;\n  /**\n   * If true, mark this item as advanced in studio.\n   */\n  advanced?: boolean;\n  /**\n   * Label to be shown in the studio data picker for easier navigation (data binding).\n   */\n  label?: string;\n  children?: ReactNode;\n}\n\nexport function DataProvider({\n  name,\n  data,\n  hidden,\n  advanced,\n  label,\n  children,\n}: DataProviderProps) {\n  const existingEnv = useDataEnv() ?? {};\n  if (!name) {\n    return <>{children}</>;\n  } else {\n    return (\n      <DataContext.Provider\n        value={{\n          ...existingEnv,\n          [name]: data,\n          [mkMetaName(name)]: mkMetaValue({ hidden, advanced, label }),\n        }}\n      >\n        {children}\n      </DataContext.Provider>\n    );\n  }\n}\n\n/**\n * This transforms `{ \"...slug\": \"a/b/c\" }` into `{ \"slug\": [\"a\", \"b\", \"c\"] }.\n */\nfunction fixCatchallParams(\n  params: Record<string, string | string[] | undefined>\n) {\n  const newParams: Record<string, string | string[]> = {};\n  for (const [key, value] of Object.entries(params)) {\n    if (!value) {\n      continue;\n    }\n    if (key.startsWith(\"...\")) {\n      newParams[key.slice(3)] =\n        typeof value === \"string\"\n          ? value.replace(/^\\/|\\/$/g, \"\").split(\"/\")\n          : value;\n    } else {\n      newParams[key] = value;\n    }\n  }\n  return newParams;\n}\n\nfunction mkPathFromRouteAndParams(\n  route: string,\n  params: Record<string, string | string[] | undefined>\n) {\n  if (!params) {\n    return route;\n  }\n  let path = route;\n  for (const [key, value] of Object.entries(params)) {\n    if (typeof value === \"string\") {\n      path = path.replace(`[${key}]`, value);\n    } else if (Array.isArray(value)) {\n      if (path.includes(`[[...${key}]]`)) {\n        path = path.replace(`[[...${key}]]`, value.join(\"/\"));\n      } else if (path.includes(`[...${key}]`)) {\n        path = path.replace(`[...${key}]`, value.join(\"/\"));\n      }\n    }\n  }\n  return path;\n}\n\nexport interface PageParamsProviderProps {\n  children?: ReactNode;\n\n  /**\n   * Page route without params substituted (e.g. /products/[slug]).\n   */\n  route?: string;\n\n  /**\n   * Page params (e.g. { slug: \"jacket\" })\n   */\n  params?: Record<string, string | string[] | undefined>;\n\n  /**\n   * Page query params (e.g. { q: \"search term\" })\n   */\n  query?: Record<string, string | string[] | undefined>;\n\n  /**\n   * @deprecated Use `route` instead.\n   */\n  path?: string;\n}\n\nexport function PageParamsProvider({\n  children,\n  route,\n  path: deprecatedRoute,\n  params = {},\n  query = {},\n}: PageParamsProviderProps) {\n  route = route ?? deprecatedRoute;\n  params = fixCatchallParams(params);\n  const $ctx = useDataEnv() || {};\n  const path = route ? mkPathFromRouteAndParams(route, params) : undefined;\n  return (\n    <DataProvider\n      name={\"pageRoute\"}\n      data={route}\n      label={\"Page route\"}\n      advanced={true}\n    >\n      <DataProvider name={\"pagePath\"} data={path} label={\"Page path\"}>\n        <DataProvider\n          name={\"params\"}\n          data={{ ...$ctx.params, ...params }}\n          label={\"Page URL path params\"}\n        >\n          <DataProvider\n            name={\"query\"}\n            data={{ ...$ctx.query, ...query }}\n            label={\"Page URL query params\"}\n          >\n            {children}\n          </DataProvider>\n        </DataProvider>\n      </DataProvider>\n    </DataProvider>\n  );\n}\n\nexport function DataCtxReader({\n  children,\n}: {\n  children: ($ctx: DataDict | undefined) => ReactNode;\n}) {\n  const $ctx = useDataEnv();\n  return children($ctx) as ReactElement | null;\n}\n","import { PrimitiveType } from \"./prop-types\";\n\nconst root = globalThis as any;\n\nexport type Fetcher = (...args: any[]) => Promise<any>;\n\nexport interface FetcherMeta {\n  /**\n   * Any unique identifying string for this fetcher.\n   */\n  name: string;\n  /**\n   * The Studio-user-friendly display name.\n   */\n  displayName?: string;\n  /**\n   * The symbol to import from the importPath.\n   */\n  importName?: string;\n  args: { name: string; type: PrimitiveType }[];\n  returns: PrimitiveType;\n  /**\n   * Either the path to the fetcher relative to `rootDir` or the npm\n   * package name\n   */\n  importPath: string;\n  /**\n   * Whether it's a default export or named export\n   */\n  isDefaultExport?: boolean;\n}\n\nexport interface FetcherRegistration {\n  fetcher: Fetcher;\n  meta: FetcherMeta;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicFetcherRegistry: FetcherRegistration[];\n  }\n}\n\nroot.__PlasmicFetcherRegistry = [];\n\nexport function registerFetcher(fetcher: Fetcher, meta: FetcherMeta) {\n  root.__PlasmicFetcherRegistry.push({ fetcher, meta });\n}\n","import React from \"react\";\n\nexport type GlobalActionDict = Record<string, Function>;\n\nexport const GlobalActionsContext = React.createContext<\n  GlobalActionDict | undefined\n>(undefined);\n\nexport function GlobalActionsProvider(props: {\n  contextName: string;\n  children?: React.ReactNode;\n  actions: GlobalActionDict;\n}) {\n  const { contextName, children, actions } = props;\n  const existingActions = useGlobalActions();\n  const namespacedActions = React.useMemo(\n    () =>\n      Object.fromEntries(\n        Object.entries(actions).map(([key, val]) => [\n          `${contextName}.${key}`,\n          val,\n        ])\n      ),\n    [contextName, actions]\n  );\n  return (\n    <GlobalActionsContext.Provider\n      value={{\n        ...existingActions,\n        ...namespacedActions,\n      }}\n    >\n      {children}\n    </GlobalActionsContext.Provider>\n  );\n}\n\nexport function useGlobalActions() {\n  return React.useContext(GlobalActionsContext) ?? {};\n}\n","import React from \"react\";\n\nconst PlasmicLinkContext = React.createContext<\n  React.ComponentType<any> | undefined\n>(undefined);\n\nexport function usePlasmicLinkMaybe():\n  | React.ComponentType<React.ComponentProps<\"a\">>\n  | undefined {\n  return React.useContext(PlasmicLinkContext);\n}\n\nconst AnchorLink = React.forwardRef(function AnchorLink(\n  props: React.ComponentProps<\"a\">,\n  ref: React.Ref<HTMLAnchorElement>\n) {\n  return <a {...props} ref={ref} />;\n});\n\nexport function usePlasmicLink(): React.ComponentType<\n  React.ComponentProps<\"a\">\n> {\n  const Link = React.useContext(PlasmicLinkContext);\n  if (Link) {\n    return Link;\n  } else {\n    return AnchorLink as React.ComponentType<React.ComponentProps<\"a\">>;\n  }\n}\n\nexport function PlasmicLinkProvider(props: {\n  Link: React.ComponentType<any> | undefined;\n  children?: React.ReactNode;\n}) {\n  const { Link, children } = props;\n  return (\n    <PlasmicLinkContext.Provider value={Link}>\n      {children}\n    </PlasmicLinkContext.Provider>\n  );\n}\n","import {\n  CodeComponentElement,\n  CSSProperties,\n  PlasmicElement,\n} from \"./element-types\";\nimport {\n  ContextDependentConfig,\n  InferDataType,\n  ModalProps,\n  PropType,\n  RestrictPropType,\n} from \"./prop-types\";\nimport { TupleUnion } from \"./type-utils\";\nexport type * from \"./prop-types\";\n\nconst root = globalThis as any;\n\nexport interface ActionProps<P> {\n  componentProps: P;\n  /**\n   * `contextData` can be `null` if the prop controls are rendering before\n   * the component instance itself (it will re-render once the component\n   * calls `setControlContextData`)\n   */\n  contextData: InferDataType<P> | null;\n  studioOps: {\n    showModal: (\n      modalProps: Omit<ModalProps, \"onClose\"> & { onClose?: () => void }\n    ) => void;\n    refreshQueryData: () => void;\n    appendToSlot: (element: PlasmicElement, slotName: string) => void;\n    removeFromSlotAt: (pos: number, slotName: string) => void;\n    updateProps: (newValues: any) => void;\n    updateStates: (newValues: any) => void;\n  };\n  /**\n   * The document that the component will be rendered into; instead of using\n   * `document` directly (for, say, `document.querySelector()` etc.), you\n   * should use this instead.\n   */\n  studioDocument: typeof document;\n}\n\nexport type Action<P> =\n  | {\n      type: \"button-action\";\n      label: string;\n      onClick: (props: ActionProps<P>) => void;\n      hidden?: ContextDependentConfig<P, boolean>;\n    }\n  | {\n      type: \"custom-action\";\n      control: React.ComponentType<ActionProps<P>>;\n      hidden?: ContextDependentConfig<P, boolean>;\n    };\n\ntype DistributedKeyOf<T> = T extends any ? keyof T : never;\n\ninterface ComponentTemplate<P>\n  extends Omit<CodeComponentElement<P>, \"type\" | \"name\"> {\n  /**\n   * A preview picture for the template.\n   */\n  previewImg?: string;\n}\n\nexport interface ComponentTemplates<P> {\n  [name: string]: ComponentTemplate<P>;\n}\n\nexport type StateSpec<P> = {\n  onChangeProp: string;\n\n  /**\n   * If true, will hide the state on studio.\n   */\n  hidden?: ContextDependentConfig<P, boolean>;\n\n  /**\n   * If true, will hide the state in a collapsed section; good for states that\n   * should not usually be used.\n   */\n  advanced?: ContextDependentConfig<P, boolean>;\n} & (\n  | {\n      type: \"readonly\";\n      variableType: \"text\";\n      initVal?: string;\n    }\n  | {\n      type: \"readonly\";\n      variableType: \"number\";\n      initVal?: number;\n    }\n  | {\n      type: \"readonly\";\n      variableType: \"boolean\";\n      initVal?: boolean;\n    }\n  | {\n      type: \"readonly\";\n      variableType: \"array\";\n      initVal?: any[];\n    }\n  | {\n      type: \"readonly\";\n      variableType: \"object\";\n      initVal?: object;\n    }\n  | {\n      type: \"readonly\";\n      variableType: \"dateString\";\n      initVal?: string;\n    }\n  | {\n      type: \"readonly\";\n      variableType: \"dateRangeStrings\";\n      initVal?: [string, string];\n    }\n  | {\n      type: \"writable\";\n      variableType:\n        | \"text\"\n        | \"number\"\n        | \"boolean\"\n        | \"array\"\n        | \"object\"\n        | \"dateString\"\n        | \"dateRangeStrings\";\n      valueProp: string;\n    }\n);\n\nexport interface StateHelpers<P, T> {\n  initFunc?: ($props: P) => T;\n  onChangeArgsToValue?: (...args: any) => T;\n  onMutate?: (stateValue: T, $ref: any) => void;\n}\n\n// A compile-time error will occur if a new field is added to the StateHelper\n// interface but not included in the keys array of state helper.\nexport const stateHelpersKeys: TupleUnion<keyof StateHelpers<any, any>> = [\n  \"initFunc\",\n  \"onChangeArgsToValue\",\n  \"onMutate\",\n];\n\nexport type ComponentHelpers<P> = {\n  states: Record<string, StateHelpers<P, any>>;\n};\n\nexport type ExternalComponentHelpers<P> = {\n  helpers: ComponentHelpers<P>;\n  importPath: string;\n} & (\n  | {\n      importName: string;\n    }\n  | {\n      isDefaultExport: true;\n    }\n);\n\nexport type StyleSection =\n  | \"visibility\"\n  | \"typography\"\n  | \"sizing\"\n  | \"spacing\"\n  | \"background\"\n  | \"transform\"\n  | \"transitions\"\n  | \"layout\"\n  | \"overflow\"\n  | \"border\"\n  | \"shadows\"\n  | \"effects\";\n\nexport interface CodeComponentMeta<P> {\n  /**\n   * Any unique string name used to identify that component. Each component\n   * should be registered with a different `meta.name`, even if they have the\n   * same name in the code.\n   */\n  name: string;\n  /**\n   * The name to be displayed for the component in Studio. Optional: if not\n   * specified, `meta.name` is used.\n   */\n  displayName?: string;\n  /**\n   * The description of the component to be shown in Studio.\n   */\n  description?: string;\n  /**\n   * A specific section to which the component should be displayed in Studio. By default, the component will be displayed in the \"Custom Components\" section.\n   * A new section will be created to display the components with the same `section` value.\n   */\n  section?: string;\n  /**\n   * A link to an image that will be displayed as a thumbnail of the component in the Studio, if the component has a `section` specified.\n   */\n  thumbnailUrl?: string;\n  /**\n   * The javascript name to be used when generating code. Optional: if not\n   * provided, `meta.name` is used.\n   */\n  importName?: string;\n  /**\n   * An object describing the component properties to be used in Studio.\n   * For each `prop`, there should be an entry `meta.props[prop]` describing\n   * its type.\n   */\n  props: { [prop in DistributedKeyOf<P>]?: RestrictPropType<P[prop], P> } & {\n    [prop: string]: PropType<P>;\n  };\n  /**\n   * An object describing the component states to be used in Studio.\n   */\n  states?: Record<string, StateSpec<P>>;\n  /**\n   * An object describing the components helpers to be used in Studio.\n   *   1. states helpers: Each state can receive an \"initFunc\" prop to initialize\n   *      the implicit state in Studio, and an \"onChangeArgsToValue\" prop to\n   *      transform the event handler arguments into a value\n   */\n  componentHelpers?: ExternalComponentHelpers<P>;\n  /**\n   * An array describing the component actions to be used in Studio.\n   */\n  actions?: Action<P>[];\n  /**\n   * Whether style sections should be shown in Studio. For styles to work, the\n   * component must accept a `className` prop. If unset, defaults to all styles.\n   * Set to `false` if this component cannot be styled (for example, if it doesn't\n   * render any DOM elements).\n   */\n  styleSections?: StyleSection[] | boolean;\n  /**\n   * Whether the element can be repeated in Studio. If unset, defaults to true.\n   */\n  isRepeatable?: boolean;\n  /**\n   * The path to be used when importing the component in the generated code.\n   * It can be the name of the package that contains the component, or the path\n   * to the file in the project (relative to the root directory).\n   */\n  importPath: string;\n  /**\n   *  Whether the component is the default export from that path. Optional: if\n   * not specified, it's considered `false`.\n   */\n  isDefaultExport?: boolean;\n  /**\n   * The prop that expects the CSS classes with styles to be applied to the\n   * component. Optional: if not specified, Plasmic will expect it to be\n   * `className`. Notice that if the component does not accept CSS classes, the\n   * component will not be able to receive styles from the Studio.\n   */\n  classNameProp?: string;\n  /**\n   * The prop that receives and forwards a React `ref`. Plasmic only uses `ref`\n   * to interact with components, so it's not used in the generated code.\n   * Optional: If not provided, the usual `ref` is used.\n   */\n  refProp?: string;\n  /**\n   * Default styles to start with when instantiating the component in Plasmic.\n   */\n  defaultStyles?: CSSProperties;\n  /**\n   * Component templates to start with on Plasmic.\n   */\n  templates?: ComponentTemplates<P>;\n  /**\n   * Registered name of parent component, used for grouping related components.\n   */\n  parentComponentName?: string;\n  /**\n   * Whether the component can be used as an attachment to an element.\n   */\n  isAttachment?: boolean;\n  /**\n   * Whether the component provides data to its slots using DataProvider.\n   */\n  providesData?: boolean;\n\n  /**\n   * If specified, then Figma components with the specified names will be mapped\n   * to this component when you paste Figma content into Plasmic\n   */\n  figmaMappings?: {\n    figmaComponentName: string;\n  }[];\n\n  /**\n   * If specified, then Figma components will have their properties transformed\n   * before being applied to this component. This is useful for transforming Figma\n   * properties to the format expected by the component.\n   */\n  figmaPropsTransform?: (\n    props: Record<string, string | number | boolean>\n  ) => Record<\n    string,\n    string | number | boolean | null | unknown[] | Record<string, unknown>\n  >;\n\n  /**\n   * If true, when an instance of this component is added, the element\n   * will always be named by the name of this component.\n   */\n  alwaysAutoName?: boolean;\n\n  /**\n   * If true, then won't be listed in the insert menu for content creators.\n   */\n  hideFromContentCreators?: boolean;\n\n  refActions?: Record<string, RefActionRegistration<P>>;\n\n  /**\n   * Optional function that takes in component props and context, and returns\n   * a string that will be used for labeling this element in the Outline panel\n   * on the left of the Studio.  This makes it easy to identify an element when\n   * looking at the tree.\n   */\n  treeLabel?: ContextDependentConfig<P, string>;\n\n  /**\n   * The value of the CSS display property used by this component.\n   * Plasmic passes in a class name prop to components to let users style them,\n   * but normally this does not include layout properties like display.\n   * However, if the user has set the components visibility to be visible\n   * (for instance, in the base variant it was set to not visible ie display none,\n   * but in a variant it's overridden to be visible), then Plasmic needs to know\n   * what display property to set.\n   * Defaults to \"flex\".\n   */\n  defaultDisplay?: string;\n\n  /**\n   * When true, when you click for the first time anywhere in the component including its slots, the component itself is\n   * selected, making it easier to select the component instead of slot contents. So for instance, setting this on a\n   * Button ensures that clicking on the Button’s text will still select the Button and not the text element in its\n   * slot. Clicking again will deep-select the slot content.\n   */\n  trapsFocus?: boolean;\n\n  /**\n   * An object describing the component interaction variants that should be allowed in Studio, when the component is\n   * used as the root of a Studio component.\n   */\n  interactionVariants?: Record<\n    string,\n    {\n      cssSelector: string;\n      displayName: string;\n    }\n  >;\n}\n\nexport type CodeComponentMode =\n  | \"advanced\"\n  | \"simplified\"\n  | \"database-schema-driven\";\n\n/**\n * @deprecated use CodeComponentMeta instead\n */\nexport type ComponentMeta<P> = CodeComponentMeta<P>;\n\nexport interface FunctionParam<P> {\n  name: string;\n  displayName?: string;\n  type: PropType<P>;\n}\n\nexport interface RefActionRegistration<P> {\n  displayName?: string;\n  description?: string;\n  argTypes: FunctionParam<P>[];\n}\n\nexport interface ComponentRegistration {\n  component: React.ComponentType<any>;\n  meta: CodeComponentMeta<any>;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicComponentRegistry: ComponentRegistration[];\n  }\n}\n\nif (root.__PlasmicComponentRegistry == null) {\n  root.__PlasmicComponentRegistry = [];\n}\n\nexport default function registerComponent<T extends React.ComponentType<any>>(\n  component: T,\n  meta: CodeComponentMeta<React.ComponentProps<T>>\n) {\n  // Check for duplicates\n  if (\n    root.__PlasmicComponentRegistry.some(\n      (r: ComponentRegistration) =>\n        r.component === component && r.meta.name === meta.name\n    )\n  ) {\n    return;\n  }\n  root.__PlasmicComponentRegistry.push({ component, meta });\n}\n","const root = globalThis as any;\n\nexport type StringType<T extends string = string> = \"string\" | `'${T}'`;\n\nexport type NumberType<T extends number = number> =\n  | \"number\"\n  | `${number extends T ? number : T}`;\n\nexport type BooleanType<T extends boolean = boolean> =\n  | \"boolean\"\n  | `${boolean extends T ? boolean : T}`;\n\nexport type NullType = \"null\";\n\nexport type UndefinedType = \"undefined\";\n\nexport type ArrayType = \"array\";\n\nexport type ObjectType = \"object\";\n\nexport type AnyType = \"any\";\n\nexport type VoidType = \"void\";\n\nexport type RestrictedType<T> = T extends string\n  ? StringType<T>\n  : T extends number\n  ? NumberType<T>\n  : T extends boolean\n  ? BooleanType<T>\n  : T extends null\n  ? NullType\n  : T extends undefined\n  ? UndefinedType\n  : T extends Array<any>\n  ? ArrayType\n  : T extends object\n  ? ObjectType\n  : AnyType;\n\nexport type OrType<T> = RestrictedType<T>[];\n\nexport type ParamType<T> = AnyType | RestrictedType<T> | OrType<T>;\n\nexport interface BaseParam<T> {\n  name: string;\n  type?: ParamType<T>;\n  description?: string;\n  isOptional?: boolean;\n  isRestParam?: boolean;\n}\n\n// Param name and optionally param type\nexport interface RequiredParam<T> extends BaseParam<T> {\n  isOptional?: false;\n  isRestParameter?: false;\n}\n\nexport interface OptionalParam<T> extends BaseParam<T | undefined> {\n  isRestParameter?: false;\n}\n\nexport interface RestParam<T> extends BaseParam<T> {\n  isOptional?: false;\n  isRestParameter: true;\n}\n\n// https://stackoverflow.com/questions/70684030/remove-all-optional-items-from-a-tuple-type\ntype RequiredParams<\n  T extends any[],\n  U extends any[] = []\n> = Partial<T> extends T\n  ? U\n  : T extends [infer F, ...infer R]\n  ? RequiredParams<R, [...U, F]>\n  : U;\n\ntype OptionalParams<T extends any[]> = T extends [\n  ...RequiredParams<T>,\n  ...infer R\n]\n  ? [...R]\n  : [];\n\ntype HandleRequiredParams<P extends any[]> = P extends [infer H, ...infer T]\n  ? [string | RequiredParam<H>, ...HandleRequiredParams<T>]\n  : [];\n\ntype HandleOptionalParams<P extends any[]> = P extends [infer H, ...infer T]\n  ? [] | [string | OptionalParam<H | undefined>, ...HandleOptionalParams<T>]\n  : P extends []\n  ? []\n  : P extends Array<infer T>\n  ? [] | [RestParam<T[]>]\n  : [];\n\nexport type HandleParams<P extends any[]> = [\n  ...HandleRequiredParams<RequiredParams<P>>,\n  ...HandleOptionalParams<Required<OptionalParams<P>>>\n];\n\nexport type HandleReturnType<T> = VoidType | ParamType<T>;\n\nexport interface CustomFunctionMeta<F extends (...args: any[]) => any> {\n  /**\n   * The javascript name of the function. Notice it must be unique across all\n   * other functions and function namespaces. If two functions have the same\n   * name, they should be registered with different `meta.namespace`.\n   */\n  name: string;\n  /**\n   * A namespace for organizing groups of functions. It's also used to handle\n   * function name collisions. If a function has a namespace, it will be used\n   * whenever accessing the function.\n   */\n  namespace?: string;\n  /**\n   * Documentation for the registered function.\n   */\n  description?: string;\n  /**\n   * An array containing the list of parameters names the function takes.\n   * Optionally they can also be registered with the expected param types.\n   */\n  params?: HandleParams<Parameters<F>>;\n  /**\n   * Return value information.\n   */\n  returnValue?: {\n    /**\n     * The function return type.\n     */\n    type?: HandleReturnType<ReturnType<F>>;\n    /**\n     * The function return value description.\n     */\n    description?: string;\n  };\n  /**\n   * Typescript function declaration. If specified, it ignores the types\n   * provided by `params` and `returnValue`.\n   */\n  typescriptDeclaration?: string;\n  /**\n   * The path to be used when importing the function in the generated code.\n   * It can be the name of the package that contains the function, or the path\n   * to the file in the project (relative to the root directory).\n   */\n  importPath: string;\n  /**\n   * Whether the function is the default export from that path. Optional: if\n   * not specified, it's considered `false`.\n   */\n  isDefaultExport?: boolean;\n}\n\nexport interface CustomFunctionRegistration {\n  function: (...args: any[]) => any;\n  meta: CustomFunctionMeta<any>;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicFunctionsRegistry: CustomFunctionRegistration[];\n  }\n}\n\nif (root.__PlasmicFunctionsRegistry == null) {\n  root.__PlasmicFunctionsRegistry = [];\n}\n\nexport default function registerFunction<F extends (...args: any[]) => any>(\n  fn: F,\n  meta: CustomFunctionMeta<F>\n) {\n  // Check for duplicates\n  if (\n    root.__PlasmicFunctionsRegistry.some(\n      (r: CustomFunctionRegistration) =>\n        r.function === fn &&\n        r.meta.name === meta.name &&\n        r.meta.namespace == meta.namespace\n    )\n  ) {\n    return;\n  }\n  root.__PlasmicFunctionsRegistry.push({ function: fn, meta });\n}\n","import {\n  BooleanType,\n  ChoiceType,\n  CustomType,\n  DataSourceType,\n  JSONLikeType,\n  NumberType,\n  StringType,\n} from \"./prop-types\";\nimport { FunctionParam } from \"./registerComponent\";\n\nconst root = globalThis as any;\n\n// Using just a subset of types from prop-types\nexport type PropType<P> =\n  | StringType<P>\n  | BooleanType<P>\n  | NumberType<P>\n  | JSONLikeType<P>\n  | ChoiceType<P>\n  | DataSourceType<P>\n  | CustomType<P>;\n\ntype RestrictPropType<T, P> = T extends string\n  ? StringType<P> | ChoiceType<P> | JSONLikeType<P> | CustomType<P>\n  : T extends boolean\n  ? BooleanType<P> | JSONLikeType<P> | CustomType<P>\n  : T extends number\n  ? NumberType<P> | JSONLikeType<P> | CustomType<P>\n  : PropType<P>;\n\ntype DistributedKeyOf<T> = T extends any ? keyof T : never;\n\nexport interface GlobalContextMeta<P> {\n  /**\n   * Any unique string name used to identify that context. Each context\n   * should be registered with a different `meta.name`, even if they have the\n   * same name in the code.\n   */\n  name: string;\n  /**\n   * The name to be displayed for the context in Studio. Optional: if not\n   * specified, `meta.name` is used.\n   */\n  displayName?: string;\n  /**\n   * The description of the context to be shown in Studio.\n   */\n  description?: string;\n  /**\n   * The javascript name to be used when generating code. Optional: if not\n   * provided, `meta.name` is used.\n   */\n  importName?: string;\n  /**\n   * An object describing the context properties to be used in Studio.\n   * For each `prop`, there should be an entry `meta.props[prop]` describing\n   * its type.\n   */\n  props: { [prop in DistributedKeyOf<P>]?: RestrictPropType<P[prop], P> } & {\n    [prop: string]: PropType<P>;\n  };\n  /**\n   * The path to be used when importing the context in the generated code.\n   * It can be the name of the package that contains the context, or the path\n   * to the file in the project (relative to the root directory).\n   */\n  importPath: string;\n  /**\n   *  Whether the context is the default export from that path. Optional: if\n   * not specified, it's considered `false`.\n   */\n  isDefaultExport?: boolean;\n  /**\n   * The prop that receives and forwards a React `ref`. Plasmic only uses `ref`\n   * to interact with components, so it's not used in the generated code.\n   * Optional: If not provided, the usual `ref` is used.\n   */\n  refProp?: string;\n  /**\n   * Whether the global context provides data to its children using DataProvider.\n   */\n  providesData?: boolean;\n\n  globalActions?: Record<string, GlobalActionRegistration<P>>;\n}\n\nexport interface GlobalContextRegistration {\n  component: React.ComponentType<any>;\n  meta: GlobalContextMeta<any>;\n}\n\nexport interface GlobalActionRegistration<P> {\n  displayName?: string;\n  description?: string;\n  parameters: FunctionParam<P>[];\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicContextRegistry: GlobalContextRegistration[];\n  }\n}\n\nif (root.__PlasmicContextRegistry == null) {\n  root.__PlasmicContextRegistry = [];\n}\n\nexport default function registerGlobalContext<\n  T extends React.ComponentType<any>\n>(component: T, meta: GlobalContextMeta<React.ComponentProps<T>>) {\n  // Check for duplicates\n  if (\n    root.__PlasmicContextRegistry.some(\n      (r: GlobalContextRegistration) =>\n        r.component === component && r.meta.name === meta.name\n    )\n  ) {\n    return;\n  }\n  root.__PlasmicContextRegistry.push({ component, meta });\n}\n","export type TokenType =\n  | \"color\"\n  | \"spacing\"\n  | \"font-family\"\n  | \"font-size\"\n  | \"line-height\"\n  | \"opacity\";\n\nexport interface TokenRegistration {\n  /**\n   * Name for this token; should be stable across updates\n   */\n  name: string;\n  /**\n   * Value for the token, which can either be a valid css value or a css reference\n   * to a css variable provided by your host app, like `var(--my-token)`\n   */\n  value: string;\n  /**\n   * Type of token\n   */\n  type: TokenType;\n  /**\n   * Optional display name to use for this token, if you'd like to use a friendlier\n   * name to display to Studio users\n   */\n  displayName?: string;\n  /**\n   * By default, if this token is a css variable reference like `var(--my-token)`,\n   * then it is assumed that `--my-token` is defined on `:root`.  If it is defined\n   * in another element, then you can pass in a selector for that element,\n   * like `.themeRoot`.\n   */\n  selector?: string;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicTokenRegistry: TokenRegistration[];\n  }\n}\n\nconst root = globalThis as any;\n\nif (root.__PlasmicTokenRegistry == null) {\n  root.__PlasmicTokenRegistry = [];\n}\n\nexport default function registerToken(token: TokenRegistration) {\n  root.__PlasmicTokenRegistry.push(token);\n}\n","const root = globalThis as any;\n\nexport interface BasicTrait {\n  label?: string;\n  type: \"text\" | \"number\" | \"boolean\";\n}\n\nexport interface ChoiceTrait {\n  label?: string;\n  type: \"choice\";\n  options: string[];\n}\n\nexport type TraitMeta = BasicTrait | ChoiceTrait;\n\nexport interface TraitRegistration {\n  trait: string;\n  meta: TraitMeta;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicTraitRegistry: TraitRegistration[];\n  }\n}\n\nif (root.__PlasmicTraitRegistry == null) {\n  root.__PlasmicTraitRegistry = [];\n}\n\nexport default function registerTrait(trait: string, meta: TraitMeta) {\n  root.__PlasmicTraitRegistry.push({\n    trait,\n    meta,\n  });\n}\n","import { cloneElement, isValidElement } from \"react\";\n\n/**\n * Allows elements to be repeated in Plasmic Studio.\n * @param index The index of the copy (starting at 0).\n * @param elt the React element to be repeated (or an array of such).\n */\nexport default function repeatedElement<T>(index: number, elt: T): T;\n/**\n * Allows elements to be repeated in Plasmic Studio.\n * @param isPrimary should be true for at most one instance of the element, and\n * indicates which copy of the element will be highlighted when the element is\n * selected in Studio.\n * @param elt the React element to be repeated (or an array of such).\n */\nexport default function repeatedElement<T>(isPrimary: boolean, elt: T): T;\nexport default function repeatedElement<T>(index: boolean | number, elt: T): T {\n  return repeatedElementFn(index as any, elt);\n}\n\nlet repeatedElementFn: typeof repeatedElement = (\n  index: boolean | number,\n  elt: any\n) => {\n  if (Array.isArray(elt)) {\n    return elt.map((v) => repeatedElementFn(index as any, v)) as any;\n  }\n  if (elt && isValidElement(elt) && typeof elt !== \"string\") {\n    return cloneElement(elt) as any;\n  }\n  return elt;\n};\n\nconst root = globalThis as any;\nexport const setRepeatedElementFn: (fn: typeof repeatedElement) => void =\n  root?.__Sub?.setRepeatedElementFn ??\n  function (fn: typeof repeatedElement) {\n    repeatedElementFn = fn;\n  };\n","export const hostVersion = \"1.0.203\";\n","import * as PlasmicQuery from \"@plasmicapp/query\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { registerRenderErrorListener, setPlasmicRootNode } from \"./canvas-host\";\nimport * as hostModule from \"./exports\";\nimport { setRepeatedElementFn } from \"./repeatedElement\";\n// version.ts is automatically generated by `yarn build` and not committed.\nimport { hostVersion } from \"./version\";\n\n// All exports must come from \"./exports\"\nexport * from \"./exports\";\n\nconst root = globalThis as any;\n\nif (root.__Sub == null) {\n  // Creating a side effect here by logging, so that vite won't\n  // ignore this block for whatever reason. Hiding this for now\n  // as users are complaining; will have to check if this has\n  // been fixed with vite.\n  // console.log(\"Plasmic: Setting up app host dependencies\");\n  root.__Sub = {\n    React,\n    ReactDOM,\n    PlasmicQuery,\n    hostModule,\n    hostVersion,\n    hostUtils: {\n      setPlasmicRootNode,\n      registerRenderErrorListener,\n      setRepeatedElementFn,\n    },\n\n    // For backwards compatibility:\n    setPlasmicRootNode,\n    registerRenderErrorListener,\n    setRepeatedElementFn,\n    ...hostModule,\n  };\n} else {\n  console.warn(\n    `Encountered likely duplicate host version: ${root.__Sub.hostVersion} vs ${hostVersion}`\n  );\n  root.__Sub.duplicateHostVersions = root.__Sub.duplicateHostVersions ?? [];\n  root.__Sub.duplicateHostVersions.push(hostVersion);\n}\n"],"names":["useState","useCallback","React","ReactDOM","createContext","useContext","root","isValidElement","cloneElement","PlasmicQuery"],"mappings":"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"}