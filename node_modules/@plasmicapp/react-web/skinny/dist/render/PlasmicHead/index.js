import * as plasmicQuery from '@plasmicapp/query';
import * as React from 'react';

var PlasmicHeadContext = React.createContext(undefined);
function PlasmicHead(props) {
    var Head = React.useContext(PlasmicHeadContext);
    var headMetadata = 
    // Check if `HeadMetadataContext` is exported for backward compatibility
    "HeadMetadataContext" in plasmicQuery
        ? React.useContext(plasmicQuery.HeadMetadataContext)
        : undefined;
    if (headMetadata) {
        // If we have the Head metadata object specified, mutate it so to ensure it
        // stores the data that should go in the <head>.
        if (props.image) {
            headMetadata.image = props.image;
        }
        if (props.title) {
            headMetadata.title = props.title;
        }
        if (props.description) {
            headMetadata.description = props.description;
        }
        if (props.canonical) {
            headMetadata.canonical = props.canonical;
        }
    }
    if (!Head) {
        console.warn("Plasmic: Head meta tags are being ignored. To make them work, pass a Head component into PlasmicRootProvider.");
        // TODO: Link to doc about Head.
        return null;
    }
    // Helmet does not support React.Fragments, so we need to use `[<meta />,
    // <meta />]` instead of `<><meta /><meta /></>`.
    return (React.createElement(Head, null,
        props.image ? ([
            React.createElement("meta", { key: "twitter:card", name: "twitter:card", content: "summary_large_image" }),
            React.createElement("meta", { key: "og:image", property: "og:image", content: props.image }),
            React.createElement("meta", { key: "twitter:image", name: "twitter:image", content: props.image }),
        ]) : (React.createElement("meta", { key: "twitter:card", name: "twitter:card", content: "summary" })),
        props.title && [
            React.createElement("title", { key: "title" }, props.title),
            React.createElement("meta", { key: "og:title", property: "og:title", content: props.title }),
            React.createElement("meta", { key: "twitter:title", property: "twitter:title", content: props.title }),
        ],
        props.description && [
            React.createElement("meta", { key: "description", name: "description", content: props.description }),
            React.createElement("meta", { key: "og:description", property: "og:description", content: props.description }),
            React.createElement("meta", { key: "twitter:description", name: "twitter:description", content: props.description }),
        ],
        props.canonical && (React.createElement("link", { key: "canonical", rel: "canonical", href: props.canonical }))));
}
var plasmicHeadMeta = {
    name: "hostless-plasmic-head",
    displayName: "Page Metadata Override",
    description: "Set page metadata (HTML <head />) to dynamic values.",
    importName: "PlasmicHead",
    importPath: "@plasmicapp/react-web",
    isRepeatable: false,
    styleSections: false,
    props: {
        title: {
            type: "string",
            displayName: "Title",
        },
        description: {
            type: "string",
            displayName: "Description",
        },
        image: {
            type: "imageUrl",
            displayName: "Image",
        },
        canonical: {
            type: "string",
            displayName: "Canonical URL",
        },
    },
};

export { PlasmicHead, PlasmicHeadContext, plasmicHeadMeta };
//# sourceMappingURL=index.js.map
