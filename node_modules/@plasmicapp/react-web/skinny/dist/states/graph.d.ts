import { $StateSpec, Internal$StateSpec, ObjectPath } from "./types";
export declare class StateSpecNode<T> {
    private _specs;
    private _edges;
    constructor(specs: Internal$StateSpec<T>[]);
    setSpecs(specs: Internal$StateSpec<T>[]): void;
    edges(): Map<string | symbol, StateSpecNode<any>>;
    hasEdge(key: string | symbol): boolean;
    addEdge(key: string | symbol, node: StateSpecNode<any>): void;
    clearEdges(): void;
    children(): IterableIterator<StateSpecNode<any>>;
    makeTransition(key: string | symbol | number): StateSpecNode<any> | undefined;
    isLeaf(): boolean;
    hasArrayTransition(): boolean;
    getSpec(): Internal$StateSpec<T>;
    getAllSpecs(): Internal$StateSpec<T>[];
}
export declare const transformPathStringToObj: (str: string) => (string | symbol)[];
export declare function buildTree(specs: $StateSpec<any>[]): StateSpecNode<any>;
export declare function updateTree(root: StateSpecNode<any>, specs: $StateSpec<any>[]): StateSpecNode<any>;
export declare function getSpecTreeLeaves(root: StateSpecNode<any>): StateSpecNode<any>[];
export declare function findStateCell(root: StateSpecNode<any>, pathStr: string, repetitionIndex?: number[]): {
    node: StateSpecNode<any>;
    realPath: ObjectPath;
};
