import type { ComponentHelpers } from "@plasmicapp/host";
import { useLayoutEffect } from "react";
import { StateSpecNode } from "./graph";
import { $State, InitFunc, ObjectPath, StateCell } from "./types";
export declare function initializeCodeComponentStates($state: $State, states: {
    name: string;
    plasmicStateName: string;
}[], repetitionIndex: number[], componentHelpers: ComponentHelpers<any>, child$Props: Record<string, any>): void;
export declare function generateOnMutateForSpec(stateName: string, componentHelpers: ComponentHelpers<any>): ((stateValue: any, $ref: any) => void) | undefined;
export declare function initializePlasmicStates($state: $State, states: {
    name: string;
    initFunc: InitFunc<any>;
}[], repetitionIndex: number[]): void;
export declare function generateStateOnChangeProp($state: $State, path: ObjectPath): (val: any) => void;
export declare function generateStateOnChangePropForCodeComponents($state: $State, stateName: string, plasmicStatePath: ObjectPath, componentHelpers: ComponentHelpers<any>): (val: any) => void;
export declare function generateStateValueProp($state: $State, path: ObjectPath): any;
export declare const useIsomorphicLayoutEffect: typeof useLayoutEffect;
export declare function isPlasmicStateProxy(obj: any): boolean;
export declare function is$StateProxy(obj: any): number | boolean | undefined;
export declare function getStateCells($state: $State, root: StateSpecNode<any>): StateCell<any>[];
export declare function getStateCellsInPlasmicProxy(obj: any): {
    realPath: ObjectPath;
    path: string;
}[];
export declare function getStateSpecInPlasmicProxy(obj: any, path: ObjectPath): {
    spec: import("./types").Internal$StateSpec<any>;
    isImplicitStateArray: boolean;
} | undefined;
export declare function getCurrentInitialValue(obj: any, path: ObjectPath): any;
export declare function resetToInitialValue(obj: any, path: ObjectPath): void;
export declare function shallowEqual<T>(a1: T[], a2: T[]): boolean;
/**
 * Shallow comparison of arrays.
 */
export declare function arrayEq(xs: ReadonlyArray<any>, ys: ReadonlyArray<any>): boolean;
export declare function isNum(value: string | number | symbol): value is number;
type StringGen = string | (() => string);
export declare function assert<T>(cond: T, msg?: StringGen): asserts cond;
/**
 * Forked from https://github.com/lukeed/dset
 * Changes: fixed setting a deep value to a proxy object
 */
export declare function set(obj: any, keys: any, val: any): void;
/**
 * Forked from https://github.com/epoberezkin/fast-deep-equal/blob/master/src/index.jst
 * Changes: removed the comparison between constructors and instanceof objects
 * because they are dependent on the window object
 */
export declare function deepEqual(a: any, b: any): boolean;
export {};
