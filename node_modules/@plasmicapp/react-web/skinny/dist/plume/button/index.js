import { c as __rest, a as __assign, p as pick, d as __spreadArray, e as __read, o as omit } from '../../common-7e2bbe30.js';
import { m as mergeVariantToggles } from '../../plume-utils-9472dfe6.js';
import 'react';

function useButton(plasmicClass, props, config, ref) {
    var _a, _b, _c, _d;
    if (ref === void 0) { ref = null; }
    var link = props.link, isDisabled = props.isDisabled, startIcon = props.startIcon, endIcon = props.endIcon, showStartIcon = props.showStartIcon, showEndIcon = props.showEndIcon, children = props.children, target = props.target, _e = props.submitsForm, submitsForm = _e === void 0 ? false : _e, rest = __rest(props, ["link", "isDisabled", "startIcon", "endIcon", "showStartIcon", "showEndIcon", "children", "target", "submitsForm"]);
    var variants = __assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalVariantProps), false))), mergeVariantToggles({ def: config.showStartIconVariant, active: showStartIcon }, { def: config.showEndIconVariant, active: showEndIcon }, { def: config.isDisabledVariant, active: isDisabled }));
    var args = __assign(__assign(__assign(__assign({}, pick.apply(void 0, __spreadArray([props], __read(plasmicClass.internalArgProps), false))), (config.startIconSlot && (_a = {}, _a[config.startIconSlot] = startIcon, _a))), (config.endIconSlot && (_b = {}, _b[config.endIconSlot] = endIcon, _b))), (_c = {}, _c[config.contentSlot] = children, _c));
    var buttonType = undefined;
    if (!link) {
        if (!plasmicClass.internalVariantProps.includes("type") &&
            !plasmicClass.internalArgProps.includes("type") &&
            "type" in rest) {
            // There's no Plasmic-defined variant or arg called "type",
            // but the user passed in a "type" arg, so must be an override
            // or direct instantiation. We use that value
            buttonType = rest.type;
        }
        else {
            // Otherwise, we set buttonType depending in submitsForm
            buttonType = submitsForm ? "submit" : "button";
        }
    }
    var overrides = (_d = {},
        _d[config.root] = {
            as: link ? "a" : "button",
            props: __assign(__assign(__assign({}, omit.apply(void 0, __spreadArray(__spreadArray([rest], __read(plasmicClass.internalArgProps), false), __read(plasmicClass.internalVariantProps), false))), { type: buttonType, ref: ref, disabled: isDisabled, target: target === true ? "_blank" : target === false ? undefined : target }), (!!link && { href: link })),
        },
        _d);
    return {
        plasmicProps: {
            variants: variants,
            args: args,
            overrides: overrides,
        },
    };
}

export { useButton };
//# sourceMappingURL=index.js.map
