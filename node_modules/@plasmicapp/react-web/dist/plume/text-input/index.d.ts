import * as React from "react";
import { AnyPlasmicClass, PlasmicClassArgs, PlasmicClassOverrides, PlasmicClassVariants, VariantDef } from "../plume-utils";
export interface BaseTextInputProps extends Omit<React.ComponentProps<"input">, "type" | "disabled">, PlumeTextInputProps {
}
export interface PlumeTextInputProps {
    showStartIcon?: boolean;
    showEndIcon?: boolean;
    startIcon?: React.ReactNode;
    endIcon?: React.ReactNode;
    isDisabled?: boolean;
    type?: "text" | "password" | "email" | "url" | string;
    inputClassName?: string;
    inputStyle?: React.CSSProperties;
    className?: string;
    style?: React.CSSProperties;
}
export interface TextInputRefValue {
    focus: () => void;
    blur: () => void;
    getRoot: () => HTMLElement | null;
    getInput: () => HTMLInputElement | null;
}
export type TextInputRef = React.Ref<TextInputRefValue>;
interface TextInputConfig<C extends AnyPlasmicClass> {
    showStartIconVariant: VariantDef<PlasmicClassVariants<C>>;
    showEndIconVariant?: VariantDef<PlasmicClassVariants<C>>;
    isDisabledVariant?: VariantDef<PlasmicClassVariants<C>>;
    startIconSlot?: keyof PlasmicClassArgs<C>;
    endIconSlot?: keyof PlasmicClassArgs<C>;
    root: keyof PlasmicClassOverrides<C>;
    input: keyof PlasmicClassOverrides<C>;
}
export declare function useTextInput<P extends PlumeTextInputProps, C extends AnyPlasmicClass>(plasmicClass: C, props: P, config: TextInputConfig<C>, ref?: TextInputRef): {
    plasmicProps: {
        variants: PlasmicClassVariants<C>;
        args: PlasmicClassArgs<C>;
        overrides: PlasmicClassOverrides<C>;
    };
};
export {};
