{"version":3,"file":"index.js","sources":["../../../src/nextjs-app-router/react-server/index.tsx"],"sourcesContent":["import { ExtractPlasmicQueryData } from \"@plasmicapp/nextjs-app-router\";\nimport {\n  fetchExtractedHeadMetadata,\n  fetchExtractedQueryData,\n  withPlasmicMetadata,\n} from \"@plasmicapp/nextjs-app-router/react-server\";\nimport { PlasmicQueryDataProvider } from \"@plasmicapp/query\";\nimport React from \"react\";\n\nexport {\n  fetchExtractedQueryData as __EXPERMIENTAL__fetchExtractedQueryData,\n  fetchExtractedHeadMetadata as __EXPERMIENTAL__fetchExtractedHeadMetadata,\n  withPlasmicMetadata as __EXPERMIENTAL__withPlasmicMetadata,\n};\n\n/**\n * Helper function to extract Plasmic data.\n *\n * Given React element for your page and current pathname + search\n * params, returns:\n * - The extracted query data, if `plasmicSsr` search param is set\n * - A copy of the page element wraped within PlasmicQueryDataProvider to provide the extracted query data, otherwise\n */\nexport async function __EXPERMIENTAL__withExtractPlasmicQueryData(\n  pageRootElt: React.ReactElement,\n  {\n    pathname,\n    searchParams,\n  }: {\n    pathname: string;\n    searchParams: Record<string, string | string[]> | undefined;\n  }\n) {\n  const isPlasmicSsr =\n    !!searchParams?.[\"plasmicSsr\"] && searchParams?.[\"plasmicSsr\"] !== \"false\";\n\n  // If `plasmicSsr` search param is set, just wrap the page inside\n  // <ExtractPlasmicQueryData>\n  if (isPlasmicSsr) {\n    return <ExtractPlasmicQueryData>{pageRootElt}</ExtractPlasmicQueryData>;\n  }\n\n  // Otherwise, fetch the same endpoint, but setting `plasmicSsr` to extract the\n  // query data.\n  const prepassHost =\n    process.env.PLASMIC_PREPASS_HOST ??\n    (process.env.VERCEL_URL && `https://${process.env.VERCEL_URL}`) ??\n    `http://localhost:${process.env.PORT ?? 3000}`;\n\n  // Build a copy of the search params\n  const newSearchParams = new URLSearchParams(\n    Object.entries(searchParams ?? {}).flatMap(([key, values]) =>\n      Array.isArray(values) ? values.map((v) => [key, v]) : [[key, values]]\n    )\n  );\n\n  // Set `plasmicSsr` search param to indicate you are using this endpoint\n  // to extract query data.\n  newSearchParams.set(\"plasmicSsr\", \"true\");\n\n  if (process.env.VERCEL_AUTOMATION_BYPASS_SECRET) {\n    // If protection bypass is enabled, use it to ensure fetching from\n    // the SSR endpoint will not return the authentication page HTML\n    newSearchParams.set(\n      \"x-vercel-protection-bypass\",\n      process.env.VERCEL_AUTOMATION_BYPASS_SECRET\n    );\n  }\n\n  // Fetch the data from the endpoint using the new search params\n  const prefetchedQueryData = await fetchExtractedQueryData(\n    `${prepassHost}${pathname}?${newSearchParams.toString()}`\n  );\n\n  // Provide the query data to your page\n  return (\n    <PlasmicQueryDataProvider prefetchedCache={prefetchedQueryData}>\n      {pageRootElt}\n    </PlasmicQueryDataProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;;;;;;AAOG;AACmB,SAAA,2CAA2C,CAC/D,WAA+B,EAC/B,EAMC,EAAA;;QALC,QAAQ,GAAA,EAAA,CAAA,QAAA,EACR,YAAY,GAAA,EAAA,CAAA,YAAA,CAAA;;;;;;oBAMR,YAAY,GAChB,CAAC,EAAC,YAAY,aAAZ,YAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,YAAY,CAAG,YAAY,CAAC,CAAA,IAAI,CAAA,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,YAAY,CAAG,YAAY,CAAC,MAAK,OAAO,CAAC;;;AAI7E,oBAAA,IAAI,YAAY,EAAE;AAChB,wBAAA,OAAA,CAAA,CAAA,aAAO,KAAC,CAAA,aAAA,CAAA,uBAAuB,EAAE,IAAA,EAAA,WAAW,CAA2B,CAAC,CAAA;AACzE,qBAAA;AAIK,oBAAA,WAAW,GACf,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAO,CAAC,GAAG,CAAC,oBAAoB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,IAC/B,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,UAAA,CAAA,MAAA,CAAW,OAAO,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC,mCAC/D,mBAAoB,CAAA,MAAA,CAAA,CAAA,EAAA,GAAA,OAAO,CAAC,GAAG,CAAC,IAAI,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,IAAI,CAAE,CAAC;oBAG3C,eAAe,GAAG,IAAI,eAAe,CACzC,MAAM,CAAC,OAAO,CAAC,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAZ,KAAA,CAAA,GAAA,YAAY,GAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,EAAa,EAAA;AAAb,wBAAA,IAAA,EAAA,GAAA,aAAa,EAAZ,GAAG,GAAA,EAAA,CAAA,CAAA,CAAA,EAAE,MAAM,GAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AACtD,wBAAA,OAAA,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,EAAK,EAAA,OAAA,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA,EAAA,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAA;qBAAA,CACtE,CACF,CAAC;;;AAIF,oBAAA,eAAe,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;AAE1C,oBAAA,IAAI,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE;;;wBAG/C,eAAe,CAAC,GAAG,CACjB,4BAA4B,EAC5B,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAC5C,CAAC;AACH,qBAAA;AAG2B,oBAAA,OAAA,CAAA,CAAA,YAAM,uBAAuB,CACvD,EAAG,CAAA,MAAA,CAAA,WAAW,CAAG,CAAA,MAAA,CAAA,QAAQ,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,eAAe,CAAC,QAAQ,EAAE,CAAE,CAC1D,CAAA,CAAA;;AAFK,oBAAA,mBAAmB,GAAG,EAE3B,CAAA,IAAA,EAAA,CAAA;;oBAGD,OAAO,CAAA,CAAA,cACL,KAAC,CAAA,aAAA,CAAA,wBAAwB,EAAC,EAAA,eAAe,EAAE,mBAAmB,EAC3D,EAAA,WAAW,CACa,EAC3B,CAAA;;;;AACH;;;;"}