// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oag8TsAwAR9aYX3dH7PUrQ
// Component: Kj8bNhZfVFIj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: siuDsNYtBgLJ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oag8TsAwAR9aYX3dH7PUrQ/projectcss
import sty from "./PlasmicNewPage3.module.css"; // plasmic-import: Kj8bNhZfVFIj/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: AJygcP7dEmci/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 3Z5UbcRMe0zP/icon

createPlasmicElementProxy;

export type PlasmicNewPage3__VariantMembers = {};
export type PlasmicNewPage3__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage3__VariantsArgs;
export const PlasmicNewPage3__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage3__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage3__ArgsType;
export const PlasmicNewPage3__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage3__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultNewPage3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage3__RenderFunc(props: {
  variants: PlasmicNewPage3__VariantsArgs;
  args: PlasmicNewPage3__ArgsType;
  overrides: PlasmicNewPage3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"Title en"}
          </h1>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"text en"}
          </div>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__xQo3W)}
              onClick={async event => {
                const $steps = {};

                $steps["goToNewPage2"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToNewPage2"] != null &&
                  typeof $steps["goToNewPage2"] === "object" &&
                  typeof $steps["goToNewPage2"].then === "function"
                ) {
                  $steps["goToNewPage2"] = await $steps["goToNewPage2"];
                }
              }}
            >
              {"English"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__e6Q8K)}
              onClick={async event => {
                const $steps = {};

                $steps["goToNewPage3"] = true
                  ? (() => {
                      const actionArgs = { destination: `/${"ru"}` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToNewPage3"] != null &&
                  typeof $steps["goToNewPage3"] === "object" &&
                  typeof $steps["goToNewPage3"].then === "function"
                ) {
                  $steps["goToNewPage3"] = await $steps["goToNewPage3"];
                }
              }}
            >
              {"Russian"}
            </Button>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "text", "freeBox"],
  h1: ["h1"],
  text: ["text"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  text: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage3__VariantsArgs;
    args?: PlasmicNewPage3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage3__ArgProps,
          internalVariantPropNames: PlasmicNewPage3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage3";
  } else {
    func.displayName = `PlasmicNewPage3.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage3 = Object.assign(
  // Top-level PlasmicNewPage3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicNewPage3
    internalVariantProps: PlasmicNewPage3__VariantProps,
    internalArgProps: PlasmicNewPage3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage3;
/* prettier-ignore-end */
